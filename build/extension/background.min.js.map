{"version":3,"sources":["webpack:///background.min.js","webpack:///webpack/bootstrap 4703ccab8254dc353d85","webpack:///./src/back/background.coffee","webpack:///./src/back/back-transport.coffee","webpack:///./~/chai/index.js","webpack:///./~/chai/lib/chai.js","webpack:///./~/chai/~/assertion-error/index.js","webpack:///./~/chai/lib/chai/utils/index.js","webpack:///./~/chai/lib/chai/utils/test.js","webpack:///./~/chai/lib/chai/utils/flag.js","webpack:///./~/chai/~/type-detect/index.js","webpack:///./~/chai/~/type-detect/lib/type.js","webpack:///./~/chai/lib/chai/utils/expectTypes.js","webpack:///./~/chai/lib/chai/utils/getMessage.js","webpack:///./~/chai/lib/chai/utils/getActual.js","webpack:///./~/chai/lib/chai/utils/inspect.js","webpack:///./~/chai/lib/chai/utils/getName.js","webpack:///./~/chai/lib/chai/utils/getProperties.js","webpack:///./~/chai/lib/chai/utils/getEnumerableProperties.js","webpack:///./~/chai/lib/chai/utils/objDisplay.js","webpack:///./~/chai/lib/chai/config.js","webpack:///./~/chai/lib/chai/utils/transferFlags.js","webpack:///./~/chai/~/deep-eql/index.js","webpack:///./~/chai/~/deep-eql/lib/eql.js","webpack:///./~/chai/~/deep-eql/~/type-detect/index.js","webpack:///./~/chai/~/deep-eql/~/type-detect/lib/type.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/index.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/isarray/index.js","webpack:///./~/chai/lib/chai/utils/getPathValue.js","webpack:///./~/chai/lib/chai/utils/getPathInfo.js","webpack:///./~/chai/lib/chai/utils/hasProperty.js","webpack:///./~/chai/lib/chai/utils/addProperty.js","webpack:///./~/chai/lib/chai/utils/addMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteProperty.js","webpack:///./~/chai/lib/chai/utils/overwriteMethod.js","webpack:///./~/chai/lib/chai/utils/addChainableMethod.js","webpack:///./~/chai/lib/chai/utils/overwriteChainableMethod.js","webpack:///./~/chai/lib/chai/assertion.js","webpack:///./~/chai/lib/chai/core/assertions.js","webpack:///./~/chai/lib/chai/interface/expect.js","webpack:///./~/chai/lib/chai/interface/should.js","webpack:///./~/chai/lib/chai/interface/assert.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","BackSkeleton","BackTransport","assert","backSkeleton","chai","expect","ref","should","this","transport","prototype","receive","port","name","message","console","log","send","callbackObject","to","exist","chrome","runtime","onConnect","addListener","_this","onMessage","postMessage","used","version","AssertionError","util","use","fn","indexOf","push","config","assertion","core","exclude","excludeProps","res","obj","Object","keys","forEach","key","excludes","slice","arguments","args","i","length","_props","ssf","extend","props","showDiff","callee","Error","captureStackTrace","e","stack","create","constructor","toJSON","test","type","expectTypes","getMessage","getActual","inspect","objDisplay","flag","transferFlags","eql","getPathValue","getPathInfo","hasProperty","getName","addProperty","addMethod","overwriteProperty","overwriteMethod","addChainableMethod","overwriteChainableMethod","negate","expr","value","flags","__flags","getType","toString","match","objectTypeRegexp","toLowerCase","Promise","undefined","Library","tests","of","define","ReferenceError","types","map","t","sort","str","index","art","charAt","or","join","some","expected","val","actual","msg","flagMsg","replace","_obj","showHidden","depth","colors","ctx","seen","stylize","formatValue","recurseTimes","ret","primitive","formatPrimitive","isDOMElement","outerHTML","document","xmlVersion","xmlSerializer","XMLSerializer","serializeToString","ns","container","createElementNS","appendChild","cloneNode","html","innerHTML","err","visibleKeys","getEnumerableProperties","getProperties","isError","nameSuffix","isRegExp","RegExp","isDate","Date","toUTCString","formatError","base","array","braces","isArray","output","formatArray","formatProperty","pop","reduceToSingleString","simple","JSON","stringify","Infinity","l","hasOwnProperty","String","__lookupGetter__","__lookupSetter__","split","line","substr","numLinesEst","reduce","prev","cur","ar","Array","objectToString","re","d","o","object","HTMLElement","nodeType","nodeName","func","exec","property","result","getOwnPropertyNames","proto","getPrototypeOf","truncateThreshold","kstr","splice","includeStack","includeAll","deepEqual","a","b","sameValue","dateEqual","regexpEqual","Buffer","isBuffer","bufferEqual","argumentsEqual","typeEqual","objectEqual","getTime","enumerable","iterableEqual","isValue","ka","kb","ex","natives","[object Array]","[object RegExp]","[object Function]","[object Arguments]","[object Date]","global","typedArraySupport","Bar","arr","Uint8Array","foo","subarray","byteLength","kMaxLength","TYPED_ARRAY_SUPPORT","arg","parent","fromNumber","fromString","fromObject","that","allocate","checked","string","encoding","write","fromBuffer","fromArray","TypeError","ArrayBuffer","buffer","fromTypedArray","fromArrayBuffer","fromArrayLike","fromJsonObject","copy","_augment","data","__proto__","_isBuffer","fromPool","poolSize","rootParent","RangeError","SlowBuffer","subject","buf","len","loweredCase","utf8ToBytes","base64ToBytes","slowToString","start","end","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","fromByteArray","Math","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","j","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","stringtrim","INVALID_BASE64_RE","trim","n","units","leadSurrogate","charCodeAt","byteArray","hi","lo","toByteArray","src","dst","INSPECT_MAX_BYTES","compare","x","y","isEncoding","concat","list","pos","item","equals","byteOffset","arrayIndexOf","foundIndex","get","readUInt8","set","v","writeUInt8","isFinite","swap","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt16LE","readUInt16BE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","read","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","target","targetStart","_set","fill","toArrayBuffer","BP","toLocaleString","lookup","decode","elt","code","PLUS","PLUS_URL_SAFE","SLASH","SLASH_URL_SAFE","NUMBER","UPPER","LOWER","b64ToByteArray","b64","L","tmp","placeHolders","Arr","uint8ToBase64","uint8","encode","num","tripletToBase64","temp","extraBytes","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","s","NaN","rt","abs","LN2","path","info","parsePath","parts","mArr","parseFloat","_getPathValue","part","last","exists","literals","number","ot","getter","defineProperty","old_ssfi","configurable","method","_get","getOwnPropertyDescriptor","_super","_method","hasProtoSupport","excludeNames","Function","chainingBehavior","chainableBehavior","__methods","asserterNames","asserterName","pd","_chainingBehavior","_chai","Assertion","warn","negateMsg","_actual","ok","_","an","article","includeChainingBehavior","include","k","subset","checkArguments","assertEqual","assertEql","assertAbove","have","assertLeast","assertBelow","assertMost","assertInstanceOf","assertOwnProperty","assertOwnPropertyDescriptor","descriptor","actualDescriptor","assertLengthChain","assertLength","assertMatch","assertKeys","mixedArgsMsg","any","all","intersection","filter","every","assertThrows","errMsg","is","thrown","desiredError","thrownError","actuallyGot","expectedThrown","respondTo","itself","context","satisfy","matcher","closeTo","delta","isSubsetOf","superset","cmp","elem","elem2","oneOf","be","assertChanges","prop","initial","assertIncreases","assertDecreases","chain","finish","range","isDeep","pathInfo","isExtensible","isSealed","isFrozen","fail","operator","loadShould","shouldGetter","Boolean","valueOf","shouldSetter","writable","equal","val1","val2","Throw","errt","errs","not","Should","express","errmsg","isOk","isNotOk","act","exp","notEqual","strictEqual","notStrictEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","isNotNaN","isUndefined","isDefined","isFunction","isNotFunction","isObject","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","notMatch","notProperty","deepProperty","deep","notDeepProperty","propertyVal","propertyNotVal","deepPropertyVal","deepPropertyNotVal","lengthOf","assertErr","doesNotThrow","approximately","sameMembers","set1","set2","same","members","sameDeepMembers","includeMembers","includeDeepMembers","inList","changes","change","doesNotChange","increases","increase","doesNotIncrease","decreases","decrease","doesNotDecrease","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","alias","as"],"mappings":"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","file":"background.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BackSkeleton, BackTransport, assert, backSkeleton, chai, expect, ref;\n\t\n\tBackTransport = __webpack_require__(1);\n\t\n\t(ref = chai = __webpack_require__(2), expect = ref.expect, assert = ref.assert, ref).should();\n\t\n\tBackSkeleton = (function() {\n\t  function BackSkeleton() {\n\t    this.transport = new BackTransport(this);\n\t  }\n\t\n\t  BackSkeleton.prototype.receive = function(port, name, message) {\n\t    console.log(\"!name: \" + name + \"  \\n!message: \" + message);\n\t    return this.send(port, \"msg\", \"Done!\");\n\t  };\n\t\n\t  BackSkeleton.prototype.send = function(port, name, message) {\n\t    return this.transport.send(port, name, message);\n\t  };\n\t\n\t  return BackSkeleton;\n\t\n\t})();\n\t\n\tbackSkeleton = new BackSkeleton;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar BackTransport, assert, chai, expect, ref;\n\t\n\t(ref = chai = __webpack_require__(2), expect = ref.expect, assert = ref.assert, ref).should();\n\t\n\tBackTransport = (function() {\n\t  function BackTransport(callbackObject) {\n\t    this.callbackObject = callbackObject;\n\t    expect(this.callbackObject).to.exist;\n\t    chrome.runtime.onConnect.addListener((function(_this) {\n\t      return function(port) {\n\t        return port.onMessage.addListener(function(message) {\n\t          return _this.callbackObject.receive(port, message.name, message.message);\n\t        });\n\t      };\n\t    })(this));\n\t  }\n\t\n\t  BackTransport.prototype.send = function(port, name, message) {\n\t    return port.postMessage({\n\t      name: name,\n\t      message: message\n\t    });\n\t  };\n\t\n\t  return BackTransport;\n\t\n\t})();\n\t\n\tmodule.exports = BackTransport;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(3);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar used = []\n\t  , exports = module.exports = {};\n\t\n\t/*!\n\t * Chai version\n\t */\n\t\n\texports.version = '3.5.0';\n\t\n\t/*!\n\t * Assertion Error\n\t */\n\t\n\texports.AssertionError = __webpack_require__(4);\n\t\n\t/*!\n\t * Utils for plugins (not exported)\n\t */\n\t\n\tvar util = __webpack_require__(5);\n\t\n\t/**\n\t * # .use(function)\n\t *\n\t * Provides a way to extend the internals of Chai\n\t *\n\t * @param {Function}\n\t * @returns {this} for chaining\n\t * @api public\n\t */\n\t\n\texports.use = function (fn) {\n\t  if (!~used.indexOf(fn)) {\n\t    fn(this, util);\n\t    used.push(fn);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/*!\n\t * Utility Functions\n\t */\n\t\n\texports.util = util;\n\t\n\t/*!\n\t * Configuration\n\t */\n\t\n\tvar config = __webpack_require__(18);\n\texports.config = config;\n\t\n\t/*!\n\t * Primary `Assertion` prototype\n\t */\n\t\n\tvar assertion = __webpack_require__(37);\n\texports.use(assertion);\n\t\n\t/*!\n\t * Core Assertions\n\t */\n\t\n\tvar core = __webpack_require__(38);\n\texports.use(core);\n\t\n\t/*!\n\t * Expect interface\n\t */\n\t\n\tvar expect = __webpack_require__(39);\n\texports.use(expect);\n\t\n\t/*!\n\t * Should interface\n\t */\n\t\n\tvar should = __webpack_require__(40);\n\texports.use(should);\n\t\n\t/*!\n\t * Assert interface\n\t */\n\t\n\tvar assert = __webpack_require__(41);\n\texports.use(assert);\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * assertion-error\n\t * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Return a function that will copy properties from\n\t * one object to another excluding any originally\n\t * listed. Returned function will create a new `{}`.\n\t *\n\t * @param {String} excluded properties ...\n\t * @return {Function}\n\t */\n\t\n\tfunction exclude () {\n\t  var excludes = [].slice.call(arguments);\n\t\n\t  function excludeProps (res, obj) {\n\t    Object.keys(obj).forEach(function (key) {\n\t      if (!~excludes.indexOf(key)) res[key] = obj[key];\n\t    });\n\t  }\n\t\n\t  return function extendExclude () {\n\t    var args = [].slice.call(arguments)\n\t      , i = 0\n\t      , res = {};\n\t\n\t    for (; i < args.length; i++) {\n\t      excludeProps(res, args[i]);\n\t    }\n\t\n\t    return res;\n\t  };\n\t};\n\t\n\t/*!\n\t * Primary Exports\n\t */\n\t\n\tmodule.exports = AssertionError;\n\t\n\t/**\n\t * ### AssertionError\n\t *\n\t * An extension of the JavaScript `Error` constructor for\n\t * assertion and validation scenarios.\n\t *\n\t * @param {String} message\n\t * @param {Object} properties to include (optional)\n\t * @param {callee} start stack function (optional)\n\t */\n\t\n\tfunction AssertionError (message, _props, ssf) {\n\t  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n\t    , props = extend(_props || {});\n\t\n\t  // default values\n\t  this.message = message || 'Unspecified AssertionError';\n\t  this.showDiff = false;\n\t\n\t  // copy from properties\n\t  for (var key in props) {\n\t    this[key] = props[key];\n\t  }\n\t\n\t  // capture stack trace\n\t  ssf = ssf || arguments.callee;\n\t  if (ssf && Error.captureStackTrace) {\n\t    Error.captureStackTrace(this, ssf);\n\t  } else {\n\t    try {\n\t      throw new Error();\n\t    } catch(e) {\n\t      this.stack = e.stack;\n\t    }\n\t  }\n\t}\n\t\n\t/*!\n\t * Inherit from Error.prototype\n\t */\n\t\n\tAssertionError.prototype = Object.create(Error.prototype);\n\t\n\t/*!\n\t * Statically set name\n\t */\n\t\n\tAssertionError.prototype.name = 'AssertionError';\n\t\n\t/*!\n\t * Ensure correct constructor\n\t */\n\t\n\tAssertionError.prototype.constructor = AssertionError;\n\t\n\t/**\n\t * Allow errors to be converted to JSON for static transfer.\n\t *\n\t * @param {Boolean} include stack (default: `true`)\n\t * @return {Object} object that can be `JSON.stringify`\n\t */\n\t\n\tAssertionError.prototype.toJSON = function (stack) {\n\t  var extend = exclude('constructor', 'toJSON', 'stack')\n\t    , props = extend({ name: this.name }, this);\n\t\n\t  // include stack if exists and not turned off\n\t  if (false !== stack && this.stack) {\n\t    props.stack = this.stack;\n\t  }\n\t\n\t  return props;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Main exports\n\t */\n\t\n\tvar exports = module.exports = {};\n\t\n\t/*!\n\t * test utility\n\t */\n\t\n\texports.test = __webpack_require__(6);\n\t\n\t/*!\n\t * type utility\n\t */\n\t\n\texports.type = __webpack_require__(8);\n\t\n\t/*!\n\t * expectTypes utility\n\t */\n\texports.expectTypes = __webpack_require__(10);\n\t\n\t/*!\n\t * message utility\n\t */\n\t\n\texports.getMessage = __webpack_require__(11);\n\t\n\t/*!\n\t * actual utility\n\t */\n\t\n\texports.getActual = __webpack_require__(12);\n\t\n\t/*!\n\t * Inspect util\n\t */\n\t\n\texports.inspect = __webpack_require__(13);\n\t\n\t/*!\n\t * Object Display util\n\t */\n\t\n\texports.objDisplay = __webpack_require__(17);\n\t\n\t/*!\n\t * Flag utility\n\t */\n\t\n\texports.flag = __webpack_require__(7);\n\t\n\t/*!\n\t * Flag transferring utility\n\t */\n\t\n\texports.transferFlags = __webpack_require__(19);\n\t\n\t/*!\n\t * Deep equal utility\n\t */\n\t\n\texports.eql = __webpack_require__(20);\n\t\n\t/*!\n\t * Deep path value\n\t */\n\t\n\texports.getPathValue = __webpack_require__(28);\n\t\n\t/*!\n\t * Deep path info\n\t */\n\t\n\texports.getPathInfo = __webpack_require__(29);\n\t\n\t/*!\n\t * Check if a property exists\n\t */\n\t\n\texports.hasProperty = __webpack_require__(30);\n\t\n\t/*!\n\t * Function name\n\t */\n\t\n\texports.getName = __webpack_require__(14);\n\t\n\t/*!\n\t * add Property\n\t */\n\t\n\texports.addProperty = __webpack_require__(31);\n\t\n\t/*!\n\t * add Method\n\t */\n\t\n\texports.addMethod = __webpack_require__(32);\n\t\n\t/*!\n\t * overwrite Property\n\t */\n\t\n\texports.overwriteProperty = __webpack_require__(33);\n\t\n\t/*!\n\t * overwrite Method\n\t */\n\t\n\texports.overwriteMethod = __webpack_require__(34);\n\t\n\t/*!\n\t * Add a chainable method\n\t */\n\t\n\texports.addChainableMethod = __webpack_require__(35);\n\t\n\t/*!\n\t * Overwrite chainable method\n\t */\n\t\n\texports.overwriteChainableMethod = __webpack_require__(36);\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - test utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependancies\n\t */\n\t\n\tvar flag = __webpack_require__(7);\n\t\n\t/**\n\t * # test(object, expression)\n\t *\n\t * Test and object for expression.\n\t *\n\t * @param {Object} object (constructed Assertion)\n\t * @param {Arguments} chai.Assertion.prototype.assert arguments\n\t * @namespace Utils\n\t * @name test\n\t */\n\t\n\tmodule.exports = function (obj, args) {\n\t  var negate = flag(obj, 'negate')\n\t    , expr = args[0];\n\t  return negate ? !expr : expr;\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - flag utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### flag(object, key, [value])\n\t *\n\t * Get or set a flag value on an object. If a\n\t * value is provided it will be set, else it will\n\t * return the currently set value or `undefined` if\n\t * the value is not set.\n\t *\n\t *     utils.flag(this, 'foo', 'bar'); // setter\n\t *     utils.flag(this, 'foo'); // getter, returns `bar`\n\t *\n\t * @param {Object} object constructed Assertion\n\t * @param {String} key\n\t * @param {Mixed} value (optional)\n\t * @namespace Utils\n\t * @name flag\n\t * @api private\n\t */\n\t\n\tmodule.exports = function (obj, key, value) {\n\t  var flags = obj.__flags || (obj.__flags = Object.create(null));\n\t  if (arguments.length === 3) {\n\t    flags[key] = value;\n\t  } else {\n\t    return flags[key];\n\t  }\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(9);\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * type-detect\n\t * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Primary Exports\n\t */\n\t\n\tvar exports = module.exports = getType;\n\t\n\t/**\n\t * ### typeOf (obj)\n\t *\n\t * Use several different techniques to determine\n\t * the type of object being tested.\n\t *\n\t *\n\t * @param {Mixed} object\n\t * @return {String} object type\n\t * @api public\n\t */\n\tvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\t\n\tfunction getType(obj) {\n\t  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n\t  // Let \"new String('')\" return 'object'\n\t  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n\t  // PhantomJS has type \"DOMWindow\" for null\n\t  if (obj === null) return 'null';\n\t  // PhantomJS has type \"DOMWindow\" for undefined\n\t  if (obj === undefined) return 'undefined';\n\t  return type;\n\t}\n\t\n\texports.Library = Library;\n\t\n\t/**\n\t * ### Library\n\t *\n\t * Create a repository for custom type detection.\n\t *\n\t * ```js\n\t * var lib = new type.Library;\n\t * ```\n\t *\n\t */\n\t\n\tfunction Library() {\n\t  if (!(this instanceof Library)) return new Library();\n\t  this.tests = {};\n\t}\n\t\n\t/**\n\t * #### .of (obj)\n\t *\n\t * Expose replacement `typeof` detection to the library.\n\t *\n\t * ```js\n\t * if ('string' === lib.of('hello world')) {\n\t *   // ...\n\t * }\n\t * ```\n\t *\n\t * @param {Mixed} object to test\n\t * @return {String} type\n\t */\n\t\n\tLibrary.prototype.of = getType;\n\t\n\t/**\n\t * #### .define (type, test)\n\t *\n\t * Add a test to for the `.test()` assertion.\n\t *\n\t * Can be defined as a regular expression:\n\t *\n\t * ```js\n\t * lib.define('int', /^[0-9]+$/);\n\t * ```\n\t *\n\t * ... or as a function:\n\t *\n\t * ```js\n\t * lib.define('bln', function (obj) {\n\t *   if ('boolean' === lib.of(obj)) return true;\n\t *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n\t *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n\t *   return !! ~blns.indexOf(obj);\n\t * });\n\t * ```\n\t *\n\t * @param {String} type\n\t * @param {RegExp|Function} test\n\t * @api public\n\t */\n\t\n\tLibrary.prototype.define = function(type, test) {\n\t  if (arguments.length === 1) return this.tests[type];\n\t  this.tests[type] = test;\n\t  return this;\n\t};\n\t\n\t/**\n\t * #### .test (obj, test)\n\t *\n\t * Assert that an object is of type. Will first\n\t * check natives, and if that does not pass it will\n\t * use the user defined custom tests.\n\t *\n\t * ```js\n\t * assert(lib.test('1', 'int'));\n\t * assert(lib.test('yes', 'bln'));\n\t * ```\n\t *\n\t * @param {Mixed} object\n\t * @param {String} type\n\t * @return {Boolean} result\n\t * @api public\n\t */\n\t\n\tLibrary.prototype.test = function(obj, type) {\n\t  if (type === getType(obj)) return true;\n\t  var test = this.tests[type];\n\t\n\t  if (test && 'regexp' === getType(test)) {\n\t    return test.test(obj);\n\t  } else if (test && 'function' === getType(test)) {\n\t    return test(obj);\n\t  } else {\n\t    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n\t  }\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - expectTypes utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### expectTypes(obj, types)\n\t *\n\t * Ensures that the object being tested against is of a valid type.\n\t *\n\t *     utils.expectTypes(this, ['array', 'object', 'string']);\n\t *\n\t * @param {Mixed} obj constructed Assertion\n\t * @param {Array} type A list of allowed types for this assertion\n\t * @namespace Utils\n\t * @name expectTypes\n\t * @api public\n\t */\n\t\n\tvar AssertionError = __webpack_require__(4);\n\tvar flag = __webpack_require__(7);\n\tvar type = __webpack_require__(8);\n\t\n\tmodule.exports = function (obj, types) {\n\t  var obj = flag(obj, 'object');\n\t  types = types.map(function (t) { return t.toLowerCase(); });\n\t  types.sort();\n\t\n\t  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n\t  var str = types.map(function (t, index) {\n\t    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n\t    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n\t    return or + art + ' ' + t;\n\t  }).join(', ');\n\t\n\t  if (!types.some(function (expected) { return type(obj) === expected; })) {\n\t    throw new AssertionError(\n\t      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n\t    );\n\t  }\n\t};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - message composition utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependancies\n\t */\n\t\n\tvar flag = __webpack_require__(7)\n\t  , getActual = __webpack_require__(12)\n\t  , inspect = __webpack_require__(13)\n\t  , objDisplay = __webpack_require__(17);\n\t\n\t/**\n\t * ### .getMessage(object, message, negateMessage)\n\t *\n\t * Construct the error message based on flags\n\t * and template tags. Template tags will return\n\t * a stringified inspection of the object referenced.\n\t *\n\t * Message template tags:\n\t * - `#{this}` current asserted object\n\t * - `#{act}` actual value\n\t * - `#{exp}` expected value\n\t *\n\t * @param {Object} object (constructed Assertion)\n\t * @param {Arguments} chai.Assertion.prototype.assert arguments\n\t * @namespace Utils\n\t * @name getMessage\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (obj, args) {\n\t  var negate = flag(obj, 'negate')\n\t    , val = flag(obj, 'object')\n\t    , expected = args[3]\n\t    , actual = getActual(obj, args)\n\t    , msg = negate ? args[2] : args[1]\n\t    , flagMsg = flag(obj, 'message');\n\t\n\t  if(typeof msg === \"function\") msg = msg();\n\t  msg = msg || '';\n\t  msg = msg\n\t    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n\t    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n\t    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\t\n\t  return flagMsg ? flagMsg + ': ' + msg : msg;\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - getActual utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * # getActual(object, [actual])\n\t *\n\t * Returns the `actual` value for an Assertion\n\t *\n\t * @param {Object} object (constructed Assertion)\n\t * @param {Arguments} chai.Assertion.prototype.assert arguments\n\t * @namespace Utils\n\t * @name getActual\n\t */\n\t\n\tmodule.exports = function (obj, args) {\n\t  return args.length > 4 ? args[4] : obj._obj;\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// This is (almost) directly from Node.js utils\n\t// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\t\n\tvar getName = __webpack_require__(14);\n\tvar getProperties = __webpack_require__(15);\n\tvar getEnumerableProperties = __webpack_require__(16);\n\t\n\tmodule.exports = inspect;\n\t\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n\t *    properties of objects.\n\t * @param {Number} depth Depth in which to descend in object. Default is 2.\n\t * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n\t *    output. Default is false (no coloring).\n\t * @namespace Utils\n\t * @name inspect\n\t */\n\tfunction inspect(obj, showHidden, depth, colors) {\n\t  var ctx = {\n\t    showHidden: showHidden,\n\t    seen: [],\n\t    stylize: function (str) { return str; }\n\t  };\n\t  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n\t}\n\t\n\t// Returns true if object is a DOM element.\n\tvar isDOMElement = function (object) {\n\t  if (typeof HTMLElement === 'object') {\n\t    return object instanceof HTMLElement;\n\t  } else {\n\t    return object &&\n\t      typeof object === 'object' &&\n\t      object.nodeType === 1 &&\n\t      typeof object.nodeName === 'string';\n\t  }\n\t};\n\t\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (value && typeof value.inspect === 'function' &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== exports.inspect &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes);\n\t    if (typeof ret !== 'string') {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\t\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\t\n\t  // If this is a DOM element, try to get the outer HTML.\n\t  if (isDOMElement(value)) {\n\t    if ('outerHTML' in value) {\n\t      return value.outerHTML;\n\t      // This value does not have an outerHTML attribute,\n\t      //   it could still be an XML element\n\t    } else {\n\t      // Attempt to serialize it\n\t      try {\n\t        if (document.xmlVersion) {\n\t          var xmlSerializer = new XMLSerializer();\n\t          return xmlSerializer.serializeToString(value);\n\t        } else {\n\t          // Firefox 11- do not support outerHTML\n\t          //   It does, however, support innerHTML\n\t          //   Use the following to render the element\n\t          var ns = \"http://www.w3.org/1999/xhtml\";\n\t          var container = document.createElementNS(ns, '_');\n\t\n\t          container.appendChild(value.cloneNode(false));\n\t          html = container.innerHTML\n\t            .replace('><', '>' + value.innerHTML + '<');\n\t          container.innerHTML = '';\n\t          return html;\n\t        }\n\t      } catch (err) {\n\t        // This could be a non-native DOM implementation,\n\t        //   continue with the normal flow:\n\t        //   printing the element as if it is an object.\n\t      }\n\t    }\n\t  }\n\t\n\t  // Look up the keys of the object.\n\t  var visibleKeys = getEnumerableProperties(value);\n\t  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\t\n\t  // Some type of object without properties can be shortcutted.\n\t  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n\t  // a `stack` plus `description` property; ignore those for consistency.\n\t  if (keys.length === 0 || (isError(value) && (\n\t      (keys.length === 1 && keys[0] === 'stack') ||\n\t      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n\t     ))) {\n\t    if (typeof value === 'function') {\n\t      var name = getName(value);\n\t      var nameSuffix = name ? ': ' + name : '';\n\t      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n\t    }\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate(value)) {\n\t      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n\t    }\n\t    if (isError(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\t\n\t  var base = '', array = false, braces = ['{', '}'];\n\t\n\t  // Make Array say that they are Array\n\t  if (isArray(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\t\n\t  // Make functions say that they are functions\n\t  if (typeof value === 'function') {\n\t    var name = getName(value);\n\t    var nameSuffix = name ? ': ' + name : '';\n\t    base = ' [Function' + nameSuffix + ']';\n\t  }\n\t\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\t\n\t  // Make dates with properties first say the date\n\t  if (isDate(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\t\n\t  // Make error with message first say the error\n\t  if (isError(value)) {\n\t    return formatError(value);\n\t  }\n\t\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\t\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\t\n\t  ctx.seen.push(value);\n\t\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\t\n\t  ctx.seen.pop();\n\t\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\t\n\t\n\tfunction formatPrimitive(ctx, value) {\n\t  switch (typeof value) {\n\t    case 'undefined':\n\t      return ctx.stylize('undefined', 'undefined');\n\t\n\t    case 'string':\n\t      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                               .replace(/'/g, \"\\\\'\")\n\t                                               .replace(/\\\\\"/g, '\"') + '\\'';\n\t      return ctx.stylize(simple, 'string');\n\t\n\t    case 'number':\n\t      if (value === 0 && (1/value) === -Infinity) {\n\t        return ctx.stylize('-0', 'number');\n\t      }\n\t      return ctx.stylize('' + value, 'number');\n\t\n\t    case 'boolean':\n\t      return ctx.stylize('' + value, 'boolean');\n\t  }\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (value === null) {\n\t    return ctx.stylize('null', 'null');\n\t  }\n\t}\n\t\n\t\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\t\n\t\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\t\n\t\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str;\n\t  if (value.__lookupGetter__) {\n\t    if (value.__lookupGetter__(key)) {\n\t      if (value.__lookupSetter__(key)) {\n\t        str = ctx.stylize('[Getter/Setter]', 'special');\n\t      } else {\n\t        str = ctx.stylize('[Getter]', 'special');\n\t      }\n\t    } else {\n\t      if (value.__lookupSetter__(key)) {\n\t        str = ctx.stylize('[Setter]', 'special');\n\t      }\n\t    }\n\t  }\n\t  if (visibleKeys.indexOf(key) < 0) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(value[key]) < 0) {\n\t      if (recurseTimes === null) {\n\t        str = formatValue(ctx, value[key], null);\n\t      } else {\n\t        str = formatValue(ctx, value[key], recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (typeof name === 'undefined') {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\t\n\t  return name + ': ' + str;\n\t}\n\t\n\t\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var numLinesEst = 0;\n\t  var length = output.reduce(function(prev, cur) {\n\t    numLinesEst++;\n\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t    return prev + cur.length + 1;\n\t  }, 0);\n\t\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\t\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\t\n\tfunction isArray(ar) {\n\t  return Array.isArray(ar) ||\n\t         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n\t}\n\t\n\tfunction isRegExp(re) {\n\t  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n\t}\n\t\n\tfunction isDate(d) {\n\t  return typeof d === 'object' && objectToString(d) === '[object Date]';\n\t}\n\t\n\tfunction isError(e) {\n\t  return typeof e === 'object' && objectToString(e) === '[object Error]';\n\t}\n\t\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - getName utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * # getName(func)\n\t *\n\t * Gets the name of a function, in a cross-browser way.\n\t *\n\t * @param {Function} a function (usually a constructor)\n\t * @namespace Utils\n\t * @name getName\n\t */\n\t\n\tmodule.exports = function (func) {\n\t  if (func.name) return func.name;\n\t\n\t  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n\t  return match && match[1] ? match[1] : \"\";\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - getProperties utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### .getProperties(object)\n\t *\n\t * This allows the retrieval of property names of an object, enumerable or not,\n\t * inherited or not.\n\t *\n\t * @param {Object} object\n\t * @returns {Array}\n\t * @namespace Utils\n\t * @name getProperties\n\t * @api public\n\t */\n\t\n\tmodule.exports = function getProperties(object) {\n\t  var result = Object.getOwnPropertyNames(object);\n\t\n\t  function addProperty(property) {\n\t    if (result.indexOf(property) === -1) {\n\t      result.push(property);\n\t    }\n\t  }\n\t\n\t  var proto = Object.getPrototypeOf(object);\n\t  while (proto !== null) {\n\t    Object.getOwnPropertyNames(proto).forEach(addProperty);\n\t    proto = Object.getPrototypeOf(proto);\n\t  }\n\t\n\t  return result;\n\t};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - getEnumerableProperties utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### .getEnumerableProperties(object)\n\t *\n\t * This allows the retrieval of enumerable property names of an object,\n\t * inherited or not.\n\t *\n\t * @param {Object} object\n\t * @returns {Array}\n\t * @namespace Utils\n\t * @name getEnumerableProperties\n\t * @api public\n\t */\n\t\n\tmodule.exports = function getEnumerableProperties(object) {\n\t  var result = [];\n\t  for (var name in object) {\n\t    result.push(name);\n\t  }\n\t  return result;\n\t};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - flag utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependancies\n\t */\n\t\n\tvar inspect = __webpack_require__(13);\n\tvar config = __webpack_require__(18);\n\t\n\t/**\n\t * ### .objDisplay (object)\n\t *\n\t * Determines if an object or an array matches\n\t * criteria to be inspected in-line for error\n\t * messages or should be truncated.\n\t *\n\t * @param {Mixed} javascript object to inspect\n\t * @name objDisplay\n\t * @namespace Utils\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (obj) {\n\t  var str = inspect(obj)\n\t    , type = Object.prototype.toString.call(obj);\n\t\n\t  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n\t    if (type === '[object Function]') {\n\t      return !obj.name || obj.name === ''\n\t        ? '[Function]'\n\t        : '[Function: ' + obj.name + ']';\n\t    } else if (type === '[object Array]') {\n\t      return '[ Array(' + obj.length + ') ]';\n\t    } else if (type === '[object Object]') {\n\t      var keys = Object.keys(obj)\n\t        , kstr = keys.length > 2\n\t          ? keys.splice(0, 2).join(', ') + ', ...'\n\t          : keys.join(', ');\n\t      return '{ Object (' + kstr + ') }';\n\t    } else {\n\t      return str;\n\t    }\n\t  } else {\n\t    return str;\n\t  }\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\n\t  /**\n\t   * ### config.includeStack\n\t   *\n\t   * User configurable property, influences whether stack trace\n\t   * is included in Assertion error message. Default of false\n\t   * suppresses stack trace in the error message.\n\t   *\n\t   *     chai.config.includeStack = true;  // enable stack on error\n\t   *\n\t   * @param {Boolean}\n\t   * @api public\n\t   */\n\t\n\t   includeStack: false,\n\t\n\t  /**\n\t   * ### config.showDiff\n\t   *\n\t   * User configurable property, influences whether or not\n\t   * the `showDiff` flag should be included in the thrown\n\t   * AssertionErrors. `false` will always be `false`; `true`\n\t   * will be true when the assertion has requested a diff\n\t   * be shown.\n\t   *\n\t   * @param {Boolean}\n\t   * @api public\n\t   */\n\t\n\t  showDiff: true,\n\t\n\t  /**\n\t   * ### config.truncateThreshold\n\t   *\n\t   * User configurable property, sets length threshold for actual and\n\t   * expected values in assertion errors. If this threshold is exceeded, for\n\t   * example for large data structures, the value is replaced with something\n\t   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n\t   *\n\t   * Set it to zero if you want to disable truncating altogether.\n\t   *\n\t   * This is especially userful when doing assertions on arrays: having this\n\t   * set to a reasonable large value makes the failure messages readily\n\t   * inspectable.\n\t   *\n\t   *     chai.config.truncateThreshold = 0;  // disable truncating\n\t   *\n\t   * @param {Number}\n\t   * @api public\n\t   */\n\t\n\t  truncateThreshold: 40\n\t\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - transferFlags utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### transferFlags(assertion, object, includeAll = true)\n\t *\n\t * Transfer all the flags for `assertion` to `object`. If\n\t * `includeAll` is set to `false`, then the base Chai\n\t * assertion flags (namely `object`, `ssfi`, and `message`)\n\t * will not be transferred.\n\t *\n\t *\n\t *     var newAssertion = new Assertion();\n\t *     utils.transferFlags(assertion, newAssertion);\n\t *\n\t *     var anotherAsseriton = new Assertion(myObj);\n\t *     utils.transferFlags(assertion, anotherAssertion, false);\n\t *\n\t * @param {Assertion} assertion the assertion to transfer the flags from\n\t * @param {Object} object the object to transfer the flags to; usually a new assertion\n\t * @param {Boolean} includeAll\n\t * @namespace Utils\n\t * @name transferFlags\n\t * @api private\n\t */\n\t\n\tmodule.exports = function (assertion, object, includeAll) {\n\t  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\t\n\t  if (!object.__flags) {\n\t    object.__flags = Object.create(null);\n\t  }\n\t\n\t  includeAll = arguments.length === 3 ? includeAll : true;\n\t\n\t  for (var flag in flags) {\n\t    if (includeAll ||\n\t        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n\t      object.__flags[flag] = flags[flag];\n\t    }\n\t  }\n\t};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(21);\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * deep-eql\n\t * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependencies\n\t */\n\t\n\tvar type = __webpack_require__(22);\n\t\n\t/*!\n\t * Buffer.isBuffer browser shim\n\t */\n\t\n\tvar Buffer;\n\ttry { Buffer = __webpack_require__(24).Buffer; }\n\tcatch(ex) {\n\t  Buffer = {};\n\t  Buffer.isBuffer = function() { return false; }\n\t}\n\t\n\t/*!\n\t * Primary Export\n\t */\n\t\n\tmodule.exports = deepEqual;\n\t\n\t/**\n\t * Assert super-strict (egal) equality between\n\t * two objects of any type.\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @param {Array} memoised (optional)\n\t * @return {Boolean} equal match\n\t */\n\t\n\tfunction deepEqual(a, b, m) {\n\t  if (sameValue(a, b)) {\n\t    return true;\n\t  } else if ('date' === type(a)) {\n\t    return dateEqual(a, b);\n\t  } else if ('regexp' === type(a)) {\n\t    return regexpEqual(a, b);\n\t  } else if (Buffer.isBuffer(a)) {\n\t    return bufferEqual(a, b);\n\t  } else if ('arguments' === type(a)) {\n\t    return argumentsEqual(a, b, m);\n\t  } else if (!typeEqual(a, b)) {\n\t    return false;\n\t  } else if (('object' !== type(a) && 'object' !== type(b))\n\t  && ('array' !== type(a) && 'array' !== type(b))) {\n\t    return sameValue(a, b);\n\t  } else {\n\t    return objectEqual(a, b, m);\n\t  }\n\t}\n\t\n\t/*!\n\t * Strict (egal) equality test. Ensures that NaN always\n\t * equals NaN and `-0` does not equal `+0`.\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @return {Boolean} equal match\n\t */\n\t\n\tfunction sameValue(a, b) {\n\t  if (a === b) return a !== 0 || 1 / a === 1 / b;\n\t  return a !== a && b !== b;\n\t}\n\t\n\t/*!\n\t * Compare the types of two given objects and\n\t * return if they are equal. Note that an Array\n\t * has a type of `array` (not `object`) and arguments\n\t * have a type of `arguments` (not `array`/`object`).\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction typeEqual(a, b) {\n\t  return type(a) === type(b);\n\t}\n\t\n\t/*!\n\t * Compare two Date objects by asserting that\n\t * the time values are equal using `saveValue`.\n\t *\n\t * @param {Date} a\n\t * @param {Date} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction dateEqual(a, b) {\n\t  if ('date' !== type(b)) return false;\n\t  return sameValue(a.getTime(), b.getTime());\n\t}\n\t\n\t/*!\n\t * Compare two regular expressions by converting them\n\t * to string and checking for `sameValue`.\n\t *\n\t * @param {RegExp} a\n\t * @param {RegExp} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction regexpEqual(a, b) {\n\t  if ('regexp' !== type(b)) return false;\n\t  return sameValue(a.toString(), b.toString());\n\t}\n\t\n\t/*!\n\t * Assert deep equality of two `arguments` objects.\n\t * Unfortunately, these must be sliced to arrays\n\t * prior to test to ensure no bad behavior.\n\t *\n\t * @param {Arguments} a\n\t * @param {Arguments} b\n\t * @param {Array} memoize (optional)\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction argumentsEqual(a, b, m) {\n\t  if ('arguments' !== type(b)) return false;\n\t  a = [].slice.call(a);\n\t  b = [].slice.call(b);\n\t  return deepEqual(a, b, m);\n\t}\n\t\n\t/*!\n\t * Get enumerable properties of a given object.\n\t *\n\t * @param {Object} a\n\t * @return {Array} property names\n\t */\n\t\n\tfunction enumerable(a) {\n\t  var res = [];\n\t  for (var key in a) res.push(key);\n\t  return res;\n\t}\n\t\n\t/*!\n\t * Simple equality for flat iterable objects\n\t * such as Arrays or Node.js buffers.\n\t *\n\t * @param {Iterable} a\n\t * @param {Iterable} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction iterableEqual(a, b) {\n\t  if (a.length !==  b.length) return false;\n\t\n\t  var i = 0;\n\t  var match = true;\n\t\n\t  for (; i < a.length; i++) {\n\t    if (a[i] !== b[i]) {\n\t      match = false;\n\t      break;\n\t    }\n\t  }\n\t\n\t  return match;\n\t}\n\t\n\t/*!\n\t * Extension to `iterableEqual` specifically\n\t * for Node.js Buffers.\n\t *\n\t * @param {Buffer} a\n\t * @param {Mixed} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction bufferEqual(a, b) {\n\t  if (!Buffer.isBuffer(b)) return false;\n\t  return iterableEqual(a, b);\n\t}\n\t\n\t/*!\n\t * Block for `objectEqual` ensuring non-existing\n\t * values don't get in.\n\t *\n\t * @param {Mixed} object\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction isValue(a) {\n\t  return a !== null && a !== undefined;\n\t}\n\t\n\t/*!\n\t * Recursively check the equality of two objects.\n\t * Once basic sameness has been established it will\n\t * defer to `deepEqual` for each enumerable key\n\t * in the object.\n\t *\n\t * @param {Mixed} a\n\t * @param {Mixed} b\n\t * @return {Boolean} result\n\t */\n\t\n\tfunction objectEqual(a, b, m) {\n\t  if (!isValue(a) || !isValue(b)) {\n\t    return false;\n\t  }\n\t\n\t  if (a.prototype !== b.prototype) {\n\t    return false;\n\t  }\n\t\n\t  var i;\n\t  if (m) {\n\t    for (i = 0; i < m.length; i++) {\n\t      if ((m[i][0] === a && m[i][1] === b)\n\t      ||  (m[i][0] === b && m[i][1] === a)) {\n\t        return true;\n\t      }\n\t    }\n\t  } else {\n\t    m = [];\n\t  }\n\t\n\t  try {\n\t    var ka = enumerable(a);\n\t    var kb = enumerable(b);\n\t  } catch (ex) {\n\t    return false;\n\t  }\n\t\n\t  ka.sort();\n\t  kb.sort();\n\t\n\t  if (!iterableEqual(ka, kb)) {\n\t    return false;\n\t  }\n\t\n\t  m.push([ a, b ]);\n\t\n\t  var key;\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], m)) {\n\t      return false;\n\t    }\n\t  }\n\t\n\t  return true;\n\t}\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(23);\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * type-detect\n\t * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Primary Exports\n\t */\n\t\n\tvar exports = module.exports = getType;\n\t\n\t/*!\n\t * Detectable javascript natives\n\t */\n\t\n\tvar natives = {\n\t    '[object Array]': 'array'\n\t  , '[object RegExp]': 'regexp'\n\t  , '[object Function]': 'function'\n\t  , '[object Arguments]': 'arguments'\n\t  , '[object Date]': 'date'\n\t};\n\t\n\t/**\n\t * ### typeOf (obj)\n\t *\n\t * Use several different techniques to determine\n\t * the type of object being tested.\n\t *\n\t *\n\t * @param {Mixed} object\n\t * @return {String} object type\n\t * @api public\n\t */\n\t\n\tfunction getType (obj) {\n\t  var str = Object.prototype.toString.call(obj);\n\t  if (natives[str]) return natives[str];\n\t  if (obj === null) return 'null';\n\t  if (obj === undefined) return 'undefined';\n\t  if (obj === Object(obj)) return 'object';\n\t  return typeof obj;\n\t}\n\t\n\texports.Library = Library;\n\t\n\t/**\n\t * ### Library\n\t *\n\t * Create a repository for custom type detection.\n\t *\n\t * ```js\n\t * var lib = new type.Library;\n\t * ```\n\t *\n\t */\n\t\n\tfunction Library () {\n\t  this.tests = {};\n\t}\n\t\n\t/**\n\t * #### .of (obj)\n\t *\n\t * Expose replacement `typeof` detection to the library.\n\t *\n\t * ```js\n\t * if ('string' === lib.of('hello world')) {\n\t *   // ...\n\t * }\n\t * ```\n\t *\n\t * @param {Mixed} object to test\n\t * @return {String} type\n\t */\n\t\n\tLibrary.prototype.of = getType;\n\t\n\t/**\n\t * #### .define (type, test)\n\t *\n\t * Add a test to for the `.test()` assertion.\n\t *\n\t * Can be defined as a regular expression:\n\t *\n\t * ```js\n\t * lib.define('int', /^[0-9]+$/);\n\t * ```\n\t *\n\t * ... or as a function:\n\t *\n\t * ```js\n\t * lib.define('bln', function (obj) {\n\t *   if ('boolean' === lib.of(obj)) return true;\n\t *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n\t *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n\t *   return !! ~blns.indexOf(obj);\n\t * });\n\t * ```\n\t *\n\t * @param {String} type\n\t * @param {RegExp|Function} test\n\t * @api public\n\t */\n\t\n\tLibrary.prototype.define = function (type, test) {\n\t  if (arguments.length === 1) return this.tests[type];\n\t  this.tests[type] = test;\n\t  return this;\n\t};\n\t\n\t/**\n\t * #### .test (obj, test)\n\t *\n\t * Assert that an object is of type. Will first\n\t * check natives, and if that does not pass it will\n\t * use the user defined custom tests.\n\t *\n\t * ```js\n\t * assert(lib.test('1', 'int'));\n\t * assert(lib.test('yes', 'bln'));\n\t * ```\n\t *\n\t * @param {Mixed} object\n\t * @param {String} type\n\t * @return {Boolean} result\n\t * @api public\n\t */\n\t\n\tLibrary.prototype.test = function (obj, type) {\n\t  if (type === getType(obj)) return true;\n\t  var test = this.tests[type];\n\t\n\t  if (test && 'regexp' === getType(test)) {\n\t    return test.test(obj);\n\t  } else if (test && 'function' === getType(test)) {\n\t    return test(obj);\n\t  } else {\n\t    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n\t  }\n\t};\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t/* eslint-disable no-proto */\n\t\n\t'use strict'\n\t\n\tvar base64 = __webpack_require__(25)\n\tvar ieee754 = __webpack_require__(26)\n\tvar isArray = __webpack_require__(27)\n\t\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\tBuffer.poolSize = 8192 // not used by this implementation\n\t\n\tvar rootParent = {}\n\t\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n\t *     on objects.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\t\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n\t  ? global.TYPED_ARRAY_SUPPORT\n\t  : typedArraySupport()\n\t\n\tfunction typedArraySupport () {\n\t  function Bar () {}\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.foo = function () { return 42 }\n\t    arr.constructor = Bar\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        arr.constructor === Bar && // constructor can be set\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t}\n\t\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\t\n\t/**\n\t * Class: Buffer\n\t * =============\n\t *\n\t * The Buffer constructor returns instances of `Uint8Array` that are augmented\n\t * with function properties for all the node `Buffer` API functions. We use\n\t * `Uint8Array` so that square bracket notation works as expected -- it returns\n\t * a single octet.\n\t *\n\t * By augmenting the instances, we can avoid modifying the `Uint8Array`\n\t * prototype.\n\t */\n\tfunction Buffer (arg) {\n\t  if (!(this instanceof Buffer)) {\n\t    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n\t    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n\t    return new Buffer(arg)\n\t  }\n\t\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this.length = 0\n\t    this.parent = undefined\n\t  }\n\t\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    return fromNumber(this, arg)\n\t  }\n\t\n\t  // Slightly less common case.\n\t  if (typeof arg === 'string') {\n\t    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n\t  }\n\t\n\t  // Unusual.\n\t  return fromObject(this, arg)\n\t}\n\t\n\tfunction fromNumber (that, length) {\n\t  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < length; i++) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\t\n\t  // Assumption: byteLength() return value is always < kMaxLength.\n\t  var length = byteLength(string, encoding) | 0\n\t  that = allocate(that, length)\n\t\n\t  that.write(string, encoding)\n\t  return that\n\t}\n\t\n\tfunction fromObject (that, object) {\n\t  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\t\n\t  if (isArray(object)) return fromArray(that, object)\n\t\n\t  if (object == null) {\n\t    throw new TypeError('must start with number, buffer, array or string')\n\t  }\n\t\n\t  if (typeof ArrayBuffer !== 'undefined') {\n\t    if (object.buffer instanceof ArrayBuffer) {\n\t      return fromTypedArray(that, object)\n\t    }\n\t    if (object instanceof ArrayBuffer) {\n\t      return fromArrayBuffer(that, object)\n\t    }\n\t  }\n\t\n\t  if (object.length) return fromArrayLike(that, object)\n\t\n\t  return fromJsonObject(that, object)\n\t}\n\t\n\tfunction fromBuffer (that, buffer) {\n\t  var length = checked(buffer.length) | 0\n\t  that = allocate(that, length)\n\t  buffer.copy(that, 0, 0, length)\n\t  return that\n\t}\n\t\n\tfunction fromArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Duplicate of fromArray() to keep fromArray() monomorphic.\n\tfunction fromTypedArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  // Truncating the elements is probably not what people expect from typed\n\t  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n\t  // of the old Buffer constructor.\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayBuffer (that, array) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    array.byteLength\n\t    that = Buffer._augment(new Uint8Array(array))\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromTypedArray(that, new Uint8Array(array))\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayLike (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n\t// Returns a zero-length buffer for inputs that don't conform to the spec.\n\tfunction fromJsonObject (that, object) {\n\t  var array\n\t  var length = 0\n\t\n\t  if (object.type === 'Buffer' && isArray(object.data)) {\n\t    array = object.data\n\t    length = checked(array.length) | 0\n\t  }\n\t  that = allocate(that, length)\n\t\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tif (Buffer.TYPED_ARRAY_SUPPORT) {\n\t  Buffer.prototype.__proto__ = Uint8Array.prototype\n\t  Buffer.__proto__ = Uint8Array\n\t} else {\n\t  // pre-set for values that may exist in the future\n\t  Buffer.prototype.length = undefined\n\t  Buffer.prototype.parent = undefined\n\t}\n\t\n\tfunction allocate (that, length) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = Buffer._augment(new Uint8Array(length))\n\t    that.__proto__ = Buffer.prototype\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that.length = length\n\t    that._isBuffer = true\n\t  }\n\t\n\t  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n\t  if (fromPool) that.parent = rootParent\n\t\n\t  return that\n\t}\n\t\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\t\n\tfunction SlowBuffer (subject, encoding) {\n\t  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\t\n\t  var buf = new Buffer(subject, encoding)\n\t  delete buf.parent\n\t  return buf\n\t}\n\t\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\t\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\t\n\t  if (a === b) return 0\n\t\n\t  var x = a.length\n\t  var y = b.length\n\t\n\t  var i = 0\n\t  var len = Math.min(x, y)\n\t  while (i < len) {\n\t    if (a[i] !== b[i]) break\n\t\n\t    ++i\n\t  }\n\t\n\t  if (i !== len) {\n\t    x = a[i]\n\t    y = b[i]\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'raw':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\t\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\t\n\t  if (list.length === 0) {\n\t    return new Buffer(0)\n\t  }\n\t\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; i++) {\n\t      length += list[i].length\n\t    }\n\t  }\n\t\n\t  var buf = new Buffer(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; i++) {\n\t    var item = list[i]\n\t    item.copy(buf, pos)\n\t    pos += item.length\n\t  }\n\t  return buf\n\t}\n\t\n\tfunction byteLength (string, encoding) {\n\t  if (typeof string !== 'string') string = '' + string\n\t\n\t  var len = string.length\n\t  if (len === 0) return 0\n\t\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'binary':\n\t      // Deprecated\n\t      case 'raw':\n\t      case 'raws':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\t\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\t\n\t  start = start | 0\n\t  end = end === undefined || end === Infinity ? this.length : end | 0\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t  if (start < 0) start = 0\n\t  if (end > this.length) end = this.length\n\t  if (end <= start) return ''\n\t\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\t\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\t\n\t      case 'binary':\n\t        return binarySlice(this, start, end)\n\t\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\t\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\t\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\t\n\tBuffer.prototype.compare = function compare (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return 0\n\t  return Buffer.compare(this, b)\n\t}\n\t\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n\t  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n\t  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n\t  byteOffset >>= 0\n\t\n\t  if (this.length === 0) return -1\n\t  if (byteOffset >= this.length) return -1\n\t\n\t  // Negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\t\n\t  if (typeof val === 'string') {\n\t    if (val.length === 0) return -1 // special case: looking for empty string always fails\n\t    return String.prototype.indexOf.call(this, val, byteOffset)\n\t  }\n\t  if (Buffer.isBuffer(val)) {\n\t    return arrayIndexOf(this, val, byteOffset)\n\t  }\n\t  if (typeof val === 'number') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n\t      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n\t    }\n\t    return arrayIndexOf(this, [ val ], byteOffset)\n\t  }\n\t\n\t  function arrayIndexOf (arr, val, byteOffset) {\n\t    var foundIndex = -1\n\t    for (var i = 0; byteOffset + i < arr.length; i++) {\n\t      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n\t      } else {\n\t        foundIndex = -1\n\t      }\n\t    }\n\t    return -1\n\t  }\n\t\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\t\n\t// `get` is deprecated\n\tBuffer.prototype.get = function get (offset) {\n\t  console.log('.get() is deprecated. Access using array indexes instead.')\n\t  return this.readUInt8(offset)\n\t}\n\t\n\t// `set` is deprecated\n\tBuffer.prototype.set = function set (v, offset) {\n\t  console.log('.set() is deprecated. Access using array indexes instead.')\n\t  return this.writeUInt8(v, offset)\n\t}\n\t\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\t\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\t\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; i++) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) throw new Error('Invalid hex string')\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\t\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction binaryWrite (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\t\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    var swap = encoding\n\t    encoding = offset\n\t    offset = length | 0\n\t    length = swap\n\t  }\n\t\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\t\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('attempt to write outside buffer bounds')\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\t\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\t\n\t      case 'binary':\n\t        return binaryWrite(this, string, offset, length)\n\t\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\t\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\t\n\tfunction utf8Slice (buf, start, end) {\n\t  end = Math.min(buf.length, end)\n\t  var res = []\n\t\n\t  var i = start\n\t  while (i < end) {\n\t    var firstByte = buf[i]\n\t    var codePoint = null\n\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t      : (firstByte > 0xDF) ? 3\n\t      : (firstByte > 0xBF) ? 2\n\t      : 1\n\t\n\t    if (i + bytesPerSequence <= end) {\n\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\t\n\t      switch (bytesPerSequence) {\n\t        case 1:\n\t          if (firstByte < 0x80) {\n\t            codePoint = firstByte\n\t          }\n\t          break\n\t        case 2:\n\t          secondByte = buf[i + 1]\n\t          if ((secondByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t            if (tempCodePoint > 0x7F) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 3:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t          break\n\t        case 4:\n\t          secondByte = buf[i + 1]\n\t          thirdByte = buf[i + 2]\n\t          fourthByte = buf[i + 3]\n\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t              codePoint = tempCodePoint\n\t            }\n\t          }\n\t      }\n\t    }\n\t\n\t    if (codePoint === null) {\n\t      // we did not generate a valid codePoint so insert a\n\t      // replacement char (U+FFFD) and advance only 1 byte\n\t      codePoint = 0xFFFD\n\t      bytesPerSequence = 1\n\t    } else if (codePoint > 0xFFFF) {\n\t      // encode to utf16 (surrogate pair dance)\n\t      codePoint -= 0x10000\n\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t    }\n\t\n\t    res.push(codePoint)\n\t    i += bytesPerSequence\n\t  }\n\t\n\t  return decodeCodePointsArray(res)\n\t}\n\t\n\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t// the lowest limit is Chrome, with 0x10000 args.\n\t// We go 1 magnitude less, for safety\n\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\t\n\tfunction decodeCodePointsArray (codePoints) {\n\t  var len = codePoints.length\n\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t  }\n\t\n\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t  var res = ''\n\t  var i = 0\n\t  while (i < len) {\n\t    res += String.fromCharCode.apply(\n\t      String,\n\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t    )\n\t  }\n\t  return res\n\t}\n\t\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction binarySlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\t\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\t\n\t  var out = ''\n\t  for (var i = start; i < end; i++) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\t\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\t\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\t\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\t\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\t\n\t  if (end < start) end = start\n\t\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = Buffer._augment(this.subarray(start, end))\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; i++) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\t\n\t  if (newBuf.length) newBuf.parent = this.parent || this\n\t\n\t  return newBuf\n\t}\n\t\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\t\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\t\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\t\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\t\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\t\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\t\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\t\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\t\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\t\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\t\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t}\n\t\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = (value & 0xff)\n\t  return offset + 1\n\t}\n\t\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value & 0xff)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = (value & 0xff)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t  if (offset < 0) throw new RangeError('index out of range')\n\t}\n\t\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\t\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\t\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\t\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\t\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\t\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\t\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\t\n\t  var len = end - start\n\t  var i\n\t\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; i--) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; i++) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    target._set(this.subarray(start, start + len), targetStart)\n\t  }\n\t\n\t  return len\n\t}\n\t\n\t// fill(value, start=0, end=buffer.length)\n\tBuffer.prototype.fill = function fill (value, start, end) {\n\t  if (!value) value = 0\n\t  if (!start) start = 0\n\t  if (!end) end = this.length\n\t\n\t  if (end < start) throw new RangeError('end < start')\n\t\n\t  // Fill 0 bytes; we're done\n\t  if (end === start) return\n\t  if (this.length === 0) return\n\t\n\t  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n\t  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\t\n\t  var i\n\t  if (typeof value === 'number') {\n\t    for (i = start; i < end; i++) {\n\t      this[i] = value\n\t    }\n\t  } else {\n\t    var bytes = utf8ToBytes(value.toString())\n\t    var len = bytes.length\n\t    for (i = start; i < end; i++) {\n\t      this[i] = bytes[i % len]\n\t    }\n\t  }\n\t\n\t  return this\n\t}\n\t\n\t/**\n\t * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n\t * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n\t */\n\tBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n\t  if (typeof Uint8Array !== 'undefined') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t      return (new Buffer(this)).buffer\n\t    } else {\n\t      var buf = new Uint8Array(this.length)\n\t      for (var i = 0, len = buf.length; i < len; i += 1) {\n\t        buf[i] = this[i]\n\t      }\n\t      return buf.buffer\n\t    }\n\t  } else {\n\t    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n\t  }\n\t}\n\t\n\t// HELPER FUNCTIONS\n\t// ================\n\t\n\tvar BP = Buffer.prototype\n\t\n\t/**\n\t * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n\t */\n\tBuffer._augment = function _augment (arr) {\n\t  arr.constructor = Buffer\n\t  arr._isBuffer = true\n\t\n\t  // save reference to original Uint8Array set method before overwriting\n\t  arr._set = arr.set\n\t\n\t  // deprecated\n\t  arr.get = BP.get\n\t  arr.set = BP.set\n\t\n\t  arr.write = BP.write\n\t  arr.toString = BP.toString\n\t  arr.toLocaleString = BP.toString\n\t  arr.toJSON = BP.toJSON\n\t  arr.equals = BP.equals\n\t  arr.compare = BP.compare\n\t  arr.indexOf = BP.indexOf\n\t  arr.copy = BP.copy\n\t  arr.slice = BP.slice\n\t  arr.readUIntLE = BP.readUIntLE\n\t  arr.readUIntBE = BP.readUIntBE\n\t  arr.readUInt8 = BP.readUInt8\n\t  arr.readUInt16LE = BP.readUInt16LE\n\t  arr.readUInt16BE = BP.readUInt16BE\n\t  arr.readUInt32LE = BP.readUInt32LE\n\t  arr.readUInt32BE = BP.readUInt32BE\n\t  arr.readIntLE = BP.readIntLE\n\t  arr.readIntBE = BP.readIntBE\n\t  arr.readInt8 = BP.readInt8\n\t  arr.readInt16LE = BP.readInt16LE\n\t  arr.readInt16BE = BP.readInt16BE\n\t  arr.readInt32LE = BP.readInt32LE\n\t  arr.readInt32BE = BP.readInt32BE\n\t  arr.readFloatLE = BP.readFloatLE\n\t  arr.readFloatBE = BP.readFloatBE\n\t  arr.readDoubleLE = BP.readDoubleLE\n\t  arr.readDoubleBE = BP.readDoubleBE\n\t  arr.writeUInt8 = BP.writeUInt8\n\t  arr.writeUIntLE = BP.writeUIntLE\n\t  arr.writeUIntBE = BP.writeUIntBE\n\t  arr.writeUInt16LE = BP.writeUInt16LE\n\t  arr.writeUInt16BE = BP.writeUInt16BE\n\t  arr.writeUInt32LE = BP.writeUInt32LE\n\t  arr.writeUInt32BE = BP.writeUInt32BE\n\t  arr.writeIntLE = BP.writeIntLE\n\t  arr.writeIntBE = BP.writeIntBE\n\t  arr.writeInt8 = BP.writeInt8\n\t  arr.writeInt16LE = BP.writeInt16LE\n\t  arr.writeInt16BE = BP.writeInt16BE\n\t  arr.writeInt32LE = BP.writeInt32LE\n\t  arr.writeInt32BE = BP.writeInt32BE\n\t  arr.writeFloatLE = BP.writeFloatLE\n\t  arr.writeFloatBE = BP.writeFloatBE\n\t  arr.writeDoubleLE = BP.writeDoubleLE\n\t  arr.writeDoubleBE = BP.writeDoubleBE\n\t  arr.fill = BP.fill\n\t  arr.inspect = BP.inspect\n\t  arr.toArrayBuffer = BP.toArrayBuffer\n\t\n\t  return arr\n\t}\n\t\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\t\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\t\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\t\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\t\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\t\n\t  for (var i = 0; i < length; i++) {\n\t    codePoint = string.charCodeAt(i)\n\t\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (!leadSurrogate) {\n\t        // no lead yet\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        }\n\t\n\t        // valid lead\n\t        leadSurrogate = codePoint\n\t\n\t        continue\n\t      }\n\t\n\t      // 2 leads in a row\n\t      if (codePoint < 0xDC00) {\n\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t        leadSurrogate = codePoint\n\t        continue\n\t      }\n\t\n\t      // valid surrogate pair\n\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t    }\n\t\n\t    leadSurrogate = null\n\t\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x110000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\t\n\t  return bytes\n\t}\n\t\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\t\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    if ((units -= 2) < 0) break\n\t\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\t\n\t  return byteArray\n\t}\n\t\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\t\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; i++) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24).Buffer, (function() { return this; }())))\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\n\t;(function (exports) {\n\t\t'use strict';\n\t\n\t  var Arr = (typeof Uint8Array !== 'undefined')\n\t    ? Uint8Array\n\t    : Array\n\t\n\t\tvar PLUS   = '+'.charCodeAt(0)\n\t\tvar SLASH  = '/'.charCodeAt(0)\n\t\tvar NUMBER = '0'.charCodeAt(0)\n\t\tvar LOWER  = 'a'.charCodeAt(0)\n\t\tvar UPPER  = 'A'.charCodeAt(0)\n\t\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\t\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\t\n\t\tfunction decode (elt) {\n\t\t\tvar code = elt.charCodeAt(0)\n\t\t\tif (code === PLUS ||\n\t\t\t    code === PLUS_URL_SAFE)\n\t\t\t\treturn 62 // '+'\n\t\t\tif (code === SLASH ||\n\t\t\t    code === SLASH_URL_SAFE)\n\t\t\t\treturn 63 // '/'\n\t\t\tif (code < NUMBER)\n\t\t\t\treturn -1 //no match\n\t\t\tif (code < NUMBER + 10)\n\t\t\t\treturn code - NUMBER + 26 + 26\n\t\t\tif (code < UPPER + 26)\n\t\t\t\treturn code - UPPER\n\t\t\tif (code < LOWER + 26)\n\t\t\t\treturn code - LOWER + 26\n\t\t}\n\t\n\t\tfunction b64ToByteArray (b64) {\n\t\t\tvar i, j, l, tmp, placeHolders, arr\n\t\n\t\t\tif (b64.length % 4 > 0) {\n\t\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t\t}\n\t\n\t\t\t// the number of equal signs (place holders)\n\t\t\t// if there are two placeholders, than the two characters before it\n\t\t\t// represent one byte\n\t\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t\t// this is just a cheap hack to not do indexOf twice\n\t\t\tvar len = b64.length\n\t\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\t\n\t\t\t// base64 is 4/3 + up to two characters of the original data\n\t\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\t\n\t\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\t\n\t\t\tvar L = 0\n\t\n\t\t\tfunction push (v) {\n\t\t\t\tarr[L++] = v\n\t\t\t}\n\t\n\t\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\tif (placeHolders === 2) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t} else if (placeHolders === 1) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\treturn arr\n\t\t}\n\t\n\t\tfunction uint8ToBase64 (uint8) {\n\t\t\tvar i,\n\t\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\t\toutput = \"\",\n\t\t\t\ttemp, length\n\t\n\t\t\tfunction encode (num) {\n\t\t\t\treturn lookup.charAt(num)\n\t\t\t}\n\t\n\t\t\tfunction tripletToBase64 (num) {\n\t\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t\t}\n\t\n\t\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\t\toutput += tripletToBase64(temp)\n\t\t\t}\n\t\n\t\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\t\tswitch (extraBytes) {\n\t\t\t\tcase 1:\n\t\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\t\toutput += '=='\n\t\t\t\t\tbreak\n\t\t\t\tcase 2:\n\t\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\t\toutput += '='\n\t\t\t\t\tbreak\n\t\t\t}\n\t\n\t\t\treturn output\n\t\t}\n\t\n\t\texports.toByteArray = b64ToByteArray\n\t\texports.fromByteArray = uint8ToBase64\n\t}( false ? (this.base64js = {}) : exports))\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\t\n\t  i += d\n\t\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\t\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\t\n\t  value = Math.abs(value)\n\t\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\t\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\t\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\t\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\t\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\tvar toString = {}.toString;\n\t\n\tmodule.exports = Array.isArray || function (arr) {\n\t  return toString.call(arr) == '[object Array]';\n\t};\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - getPathValue utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * @see https://github.com/logicalparadox/filtr\n\t * MIT Licensed\n\t */\n\t\n\tvar getPathInfo = __webpack_require__(29);\n\t\n\t/**\n\t * ### .getPathValue(path, object)\n\t *\n\t * This allows the retrieval of values in an\n\t * object given a string path.\n\t *\n\t *     var obj = {\n\t *         prop1: {\n\t *             arr: ['a', 'b', 'c']\n\t *           , str: 'Hello'\n\t *         }\n\t *       , prop2: {\n\t *             arr: [ { nested: 'Universe' } ]\n\t *           , str: 'Hello again!'\n\t *         }\n\t *     }\n\t *\n\t * The following would be the results.\n\t *\n\t *     getPathValue('prop1.str', obj); // Hello\n\t *     getPathValue('prop1.att[2]', obj); // b\n\t *     getPathValue('prop2.arr[0].nested', obj); // Universe\n\t *\n\t * @param {String} path\n\t * @param {Object} object\n\t * @returns {Object} value or `undefined`\n\t * @namespace Utils\n\t * @name getPathValue\n\t * @api public\n\t */\n\tmodule.exports = function(path, obj) {\n\t  var info = getPathInfo(path, obj);\n\t  return info.value;\n\t};\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - getPathInfo utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar hasProperty = __webpack_require__(30);\n\t\n\t/**\n\t * ### .getPathInfo(path, object)\n\t *\n\t * This allows the retrieval of property info in an\n\t * object given a string path.\n\t *\n\t * The path info consists of an object with the\n\t * following properties:\n\t *\n\t * * parent - The parent object of the property referenced by `path`\n\t * * name - The name of the final property, a number if it was an array indexer\n\t * * value - The value of the property, if it exists, otherwise `undefined`\n\t * * exists - Whether the property exists or not\n\t *\n\t * @param {String} path\n\t * @param {Object} object\n\t * @returns {Object} info\n\t * @namespace Utils\n\t * @name getPathInfo\n\t * @api public\n\t */\n\t\n\tmodule.exports = function getPathInfo(path, obj) {\n\t  var parsed = parsePath(path),\n\t      last = parsed[parsed.length - 1];\n\t\n\t  var info = {\n\t    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n\t    name: last.p || last.i,\n\t    value: _getPathValue(parsed, obj)\n\t  };\n\t  info.exists = hasProperty(info.name, info.parent);\n\t\n\t  return info;\n\t};\n\t\n\t\n\t/*!\n\t * ## parsePath(path)\n\t *\n\t * Helper function used to parse string object\n\t * paths. Use in conjunction with `_getPathValue`.\n\t *\n\t *      var parsed = parsePath('myobject.property.subprop');\n\t *\n\t * ### Paths:\n\t *\n\t * * Can be as near infinitely deep and nested\n\t * * Arrays are also valid using the formal `myobject.document[3].property`.\n\t * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n\t *\n\t * @param {String} path\n\t * @returns {Object} parsed\n\t * @api private\n\t */\n\t\n\tfunction parsePath (path) {\n\t  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n\t    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n\t  return parts.map(function (value) {\n\t    var re = /^\\[(\\d+)\\]$/\n\t      , mArr = re.exec(value);\n\t    if (mArr) return { i: parseFloat(mArr[1]) };\n\t    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n\t  });\n\t}\n\t\n\t\n\t/*!\n\t * ## _getPathValue(parsed, obj)\n\t *\n\t * Helper companion function for `.parsePath` that returns\n\t * the value located at the parsed address.\n\t *\n\t *      var value = getPathValue(parsed, obj);\n\t *\n\t * @param {Object} parsed definition from `parsePath`.\n\t * @param {Object} object to search against\n\t * @param {Number} object to search against\n\t * @returns {Object|Undefined} value\n\t * @api private\n\t */\n\t\n\tfunction _getPathValue (parsed, obj, index) {\n\t  var tmp = obj\n\t    , res;\n\t\n\t  index = (index === undefined ? parsed.length : index);\n\t\n\t  for (var i = 0, l = index; i < l; i++) {\n\t    var part = parsed[i];\n\t    if (tmp) {\n\t      if ('undefined' !== typeof part.p)\n\t        tmp = tmp[part.p];\n\t      else if ('undefined' !== typeof part.i)\n\t        tmp = tmp[part.i];\n\t      if (i == (l - 1)) res = tmp;\n\t    } else {\n\t      res = undefined;\n\t    }\n\t  }\n\t  return res;\n\t}\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - hasProperty utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar type = __webpack_require__(8);\n\t\n\t/**\n\t * ### .hasProperty(object, name)\n\t *\n\t * This allows checking whether an object has\n\t * named property or numeric array index.\n\t *\n\t * Basically does the same thing as the `in`\n\t * operator but works properly with natives\n\t * and null/undefined values.\n\t *\n\t *     var obj = {\n\t *         arr: ['a', 'b', 'c']\n\t *       , str: 'Hello'\n\t *     }\n\t *\n\t * The following would be the results.\n\t *\n\t *     hasProperty('str', obj);  // true\n\t *     hasProperty('constructor', obj);  // true\n\t *     hasProperty('bar', obj);  // false\n\t *\n\t *     hasProperty('length', obj.str); // true\n\t *     hasProperty(1, obj.str);  // true\n\t *     hasProperty(5, obj.str);  // false\n\t *\n\t *     hasProperty('length', obj.arr);  // true\n\t *     hasProperty(2, obj.arr);  // true\n\t *     hasProperty(3, obj.arr);  // false\n\t *\n\t * @param {Objuect} object\n\t * @param {String|Number} name\n\t * @returns {Boolean} whether it exists\n\t * @namespace Utils\n\t * @name getPathInfo\n\t * @api public\n\t */\n\t\n\tvar literals = {\n\t    'number': Number\n\t  , 'string': String\n\t};\n\t\n\tmodule.exports = function hasProperty(name, obj) {\n\t  var ot = type(obj);\n\t\n\t  // Bad Object, obviously no props at all\n\t  if(ot === 'null' || ot === 'undefined')\n\t    return false;\n\t\n\t  // The `in` operator does not work with certain literals\n\t  // box these before the check\n\t  if(literals[ot] && typeof obj !== 'object')\n\t    obj = new literals[ot](obj);\n\t\n\t  return name in obj;\n\t};\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - addProperty utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar config = __webpack_require__(18);\n\tvar flag = __webpack_require__(7);\n\t\n\t/**\n\t * ### addProperty (ctx, name, getter)\n\t *\n\t * Adds a property to the prototype of an object.\n\t *\n\t *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n\t *       var obj = utils.flag(this, 'object');\n\t *       new chai.Assertion(obj).to.be.instanceof(Foo);\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.addProperty('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.be.foo;\n\t *\n\t * @param {Object} ctx object to which the property is added\n\t * @param {String} name of property to add\n\t * @param {Function} getter function to be used for name\n\t * @namespace Utils\n\t * @name addProperty\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, getter) {\n\t  Object.defineProperty(ctx, name,\n\t    { get: function addProperty() {\n\t        var old_ssfi = flag(this, 'ssfi');\n\t        if (old_ssfi && config.includeStack === false)\n\t          flag(this, 'ssfi', addProperty);\n\t\n\t        var result = getter.call(this);\n\t        return result === undefined ? this : result;\n\t      }\n\t    , configurable: true\n\t  });\n\t};\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - addMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar config = __webpack_require__(18);\n\t\n\t/**\n\t * ### .addMethod (ctx, name, method)\n\t *\n\t * Adds a method to the prototype of an object.\n\t *\n\t *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n\t *       var obj = utils.flag(this, 'object');\n\t *       new chai.Assertion(obj).to.be.equal(str);\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.addMethod('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(fooStr).to.be.foo('bar');\n\t *\n\t * @param {Object} ctx object to which the method is added\n\t * @param {String} name of method to add\n\t * @param {Function} method function to be used for name\n\t * @namespace Utils\n\t * @name addMethod\n\t * @api public\n\t */\n\tvar flag = __webpack_require__(7);\n\t\n\tmodule.exports = function (ctx, name, method) {\n\t  ctx[name] = function () {\n\t    var old_ssfi = flag(this, 'ssfi');\n\t    if (old_ssfi && config.includeStack === false)\n\t      flag(this, 'ssfi', ctx[name]);\n\t    var result = method.apply(this, arguments);\n\t    return result === undefined ? this : result;\n\t  };\n\t};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - overwriteProperty utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### overwriteProperty (ctx, name, fn)\n\t *\n\t * Overwites an already existing property getter and provides\n\t * access to previous value. Must return function to use as getter.\n\t *\n\t *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n\t *       return function () {\n\t *         var obj = utils.flag(this, 'object');\n\t *         if (obj instanceof Foo) {\n\t *           new chai.Assertion(obj.name).to.equal('bar');\n\t *         } else {\n\t *           _super.call(this);\n\t *         }\n\t *       }\n\t *     });\n\t *\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.overwriteProperty('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.be.ok;\n\t *\n\t * @param {Object} ctx object whose property is to be overwritten\n\t * @param {String} name of property to overwrite\n\t * @param {Function} getter function that returns a getter function to be used for name\n\t * @namespace Utils\n\t * @name overwriteProperty\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, getter) {\n\t  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n\t    , _super = function () {};\n\t\n\t  if (_get && 'function' === typeof _get.get)\n\t    _super = _get.get\n\t\n\t  Object.defineProperty(ctx, name,\n\t    { get: function () {\n\t        var result = getter(_super).call(this);\n\t        return result === undefined ? this : result;\n\t      }\n\t    , configurable: true\n\t  });\n\t};\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - overwriteMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### overwriteMethod (ctx, name, fn)\n\t *\n\t * Overwites an already existing method and provides\n\t * access to previous function. Must return function\n\t * to be used for name.\n\t *\n\t *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n\t *       return function (str) {\n\t *         var obj = utils.flag(this, 'object');\n\t *         if (obj instanceof Foo) {\n\t *           new chai.Assertion(obj.value).to.equal(str);\n\t *         } else {\n\t *           _super.apply(this, arguments);\n\t *         }\n\t *       }\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.overwriteMethod('foo', fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.equal('bar');\n\t *\n\t * @param {Object} ctx object whose method is to be overwritten\n\t * @param {String} name of method to overwrite\n\t * @param {Function} method function that returns a function to be used for name\n\t * @namespace Utils\n\t * @name overwriteMethod\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, method) {\n\t  var _method = ctx[name]\n\t    , _super = function () { return this; };\n\t\n\t  if (_method && 'function' === typeof _method)\n\t    _super = _method;\n\t\n\t  ctx[name] = function () {\n\t    var result = method(_super).apply(this, arguments);\n\t    return result === undefined ? this : result;\n\t  }\n\t};\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * Chai - addChainingMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/*!\n\t * Module dependencies\n\t */\n\t\n\tvar transferFlags = __webpack_require__(19);\n\tvar flag = __webpack_require__(7);\n\tvar config = __webpack_require__(18);\n\t\n\t/*!\n\t * Module variables\n\t */\n\t\n\t// Check whether `__proto__` is supported\n\tvar hasProtoSupport = '__proto__' in Object;\n\t\n\t// Without `__proto__` support, this module will need to add properties to a function.\n\t// However, some Function.prototype methods cannot be overwritten,\n\t// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\n\tvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\t\n\t// Cache `Function` properties\n\tvar call  = Function.prototype.call,\n\t    apply = Function.prototype.apply;\n\t\n\t/**\n\t * ### addChainableMethod (ctx, name, method, chainingBehavior)\n\t *\n\t * Adds a method to an object, such that the method can also be chained.\n\t *\n\t *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n\t *       var obj = utils.flag(this, 'object');\n\t *       new chai.Assertion(obj).to.be.equal(str);\n\t *     });\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n\t *\n\t * The result can then be used as both a method assertion, executing both `method` and\n\t * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n\t *\n\t *     expect(fooStr).to.be.foo('bar');\n\t *     expect(fooStr).to.be.foo.equal('foo');\n\t *\n\t * @param {Object} ctx object to which the method is added\n\t * @param {String} name of method to add\n\t * @param {Function} method function to be used for `name`, when called\n\t * @param {Function} chainingBehavior function to be called every time the property is accessed\n\t * @namespace Utils\n\t * @name addChainableMethod\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, method, chainingBehavior) {\n\t  if (typeof chainingBehavior !== 'function') {\n\t    chainingBehavior = function () { };\n\t  }\n\t\n\t  var chainableBehavior = {\n\t      method: method\n\t    , chainingBehavior: chainingBehavior\n\t  };\n\t\n\t  // save the methods so we can overwrite them later, if we need to.\n\t  if (!ctx.__methods) {\n\t    ctx.__methods = {};\n\t  }\n\t  ctx.__methods[name] = chainableBehavior;\n\t\n\t  Object.defineProperty(ctx, name,\n\t    { get: function () {\n\t        chainableBehavior.chainingBehavior.call(this);\n\t\n\t        var assert = function assert() {\n\t          var old_ssfi = flag(this, 'ssfi');\n\t          if (old_ssfi && config.includeStack === false)\n\t            flag(this, 'ssfi', assert);\n\t          var result = chainableBehavior.method.apply(this, arguments);\n\t          return result === undefined ? this : result;\n\t        };\n\t\n\t        // Use `__proto__` if available\n\t        if (hasProtoSupport) {\n\t          // Inherit all properties from the object by replacing the `Function` prototype\n\t          var prototype = assert.__proto__ = Object.create(this);\n\t          // Restore the `call` and `apply` methods from `Function`\n\t          prototype.call = call;\n\t          prototype.apply = apply;\n\t        }\n\t        // Otherwise, redefine all properties (slow!)\n\t        else {\n\t          var asserterNames = Object.getOwnPropertyNames(ctx);\n\t          asserterNames.forEach(function (asserterName) {\n\t            if (!excludeNames.test(asserterName)) {\n\t              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n\t              Object.defineProperty(assert, asserterName, pd);\n\t            }\n\t          });\n\t        }\n\t\n\t        transferFlags(this, assert);\n\t        return assert;\n\t      }\n\t    , configurable: true\n\t  });\n\t};\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * Chai - overwriteChainableMethod utility\n\t * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t/**\n\t * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n\t *\n\t * Overwites an already existing chainable method\n\t * and provides access to the previous function or\n\t * property.  Must return functions to be used for\n\t * name.\n\t *\n\t *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n\t *       function (_super) {\n\t *       }\n\t *     , function (_super) {\n\t *       }\n\t *     );\n\t *\n\t * Can also be accessed directly from `chai.Assertion`.\n\t *\n\t *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n\t *\n\t * Then can be used as any other assertion.\n\t *\n\t *     expect(myFoo).to.have.length(3);\n\t *     expect(myFoo).to.have.length.above(3);\n\t *\n\t * @param {Object} ctx object whose method / property is to be overwritten\n\t * @param {String} name of method / property to overwrite\n\t * @param {Function} method function that returns a function to be used for name\n\t * @param {Function} chainingBehavior function that returns a function to be used for property\n\t * @namespace Utils\n\t * @name overwriteChainableMethod\n\t * @api public\n\t */\n\t\n\tmodule.exports = function (ctx, name, method, chainingBehavior) {\n\t  var chainableBehavior = ctx.__methods[name];\n\t\n\t  var _chainingBehavior = chainableBehavior.chainingBehavior;\n\t  chainableBehavior.chainingBehavior = function () {\n\t    var result = chainingBehavior(_chainingBehavior).call(this);\n\t    return result === undefined ? this : result;\n\t  };\n\t\n\t  var _method = chainableBehavior.method;\n\t  chainableBehavior.method = function () {\n\t    var result = method(_method).apply(this, arguments);\n\t    return result === undefined ? this : result;\n\t  };\n\t};\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * chai\n\t * http://chaijs.com\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tvar config = __webpack_require__(18);\n\t\n\tmodule.exports = function (_chai, util) {\n\t  /*!\n\t   * Module dependencies.\n\t   */\n\t\n\t  var AssertionError = _chai.AssertionError\n\t    , flag = util.flag;\n\t\n\t  /*!\n\t   * Module export.\n\t   */\n\t\n\t  _chai.Assertion = Assertion;\n\t\n\t  /*!\n\t   * Assertion Constructor\n\t   *\n\t   * Creates object for chaining.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  function Assertion (obj, msg, stack) {\n\t    flag(this, 'ssfi', stack || arguments.callee);\n\t    flag(this, 'object', obj);\n\t    flag(this, 'message', msg);\n\t  }\n\t\n\t  Object.defineProperty(Assertion, 'includeStack', {\n\t    get: function() {\n\t      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n\t      return config.includeStack;\n\t    },\n\t    set: function(value) {\n\t      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n\t      config.includeStack = value;\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(Assertion, 'showDiff', {\n\t    get: function() {\n\t      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n\t      return config.showDiff;\n\t    },\n\t    set: function(value) {\n\t      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n\t      config.showDiff = value;\n\t    }\n\t  });\n\t\n\t  Assertion.addProperty = function (name, fn) {\n\t    util.addProperty(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.addMethod = function (name, fn) {\n\t    util.addMethod(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n\t    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n\t  };\n\t\n\t  Assertion.overwriteProperty = function (name, fn) {\n\t    util.overwriteProperty(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.overwriteMethod = function (name, fn) {\n\t    util.overwriteMethod(this.prototype, name, fn);\n\t  };\n\t\n\t  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n\t    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n\t  };\n\t\n\t  /**\n\t   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n\t   *\n\t   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n\t   *\n\t   * @name assert\n\t   * @param {Philosophical} expression to be tested\n\t   * @param {String|Function} message or function that returns message to display if expression fails\n\t   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n\t   * @param {Mixed} expected value (remember to check for negation)\n\t   * @param {Mixed} actual (optional) will default to `this.obj`\n\t   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n\t   * @api private\n\t   */\n\t\n\t  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n\t    var ok = util.test(this, arguments);\n\t    if (true !== showDiff) showDiff = false;\n\t    if (true !== config.showDiff) showDiff = false;\n\t\n\t    if (!ok) {\n\t      var msg = util.getMessage(this, arguments)\n\t        , actual = util.getActual(this, arguments);\n\t      throw new AssertionError(msg, {\n\t          actual: actual\n\t        , expected: expected\n\t        , showDiff: showDiff\n\t      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n\t    }\n\t  };\n\t\n\t  /*!\n\t   * ### ._obj\n\t   *\n\t   * Quick reference to stored `actual` value for plugin developers.\n\t   *\n\t   * @api private\n\t   */\n\t\n\t  Object.defineProperty(Assertion.prototype, '_obj',\n\t    { get: function () {\n\t        return flag(this, 'object');\n\t      }\n\t    , set: function (val) {\n\t        flag(this, 'object', val);\n\t      }\n\t  });\n\t};\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * chai\n\t * http://chaijs.com\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tmodule.exports = function (chai, _) {\n\t  var Assertion = chai.Assertion\n\t    , toString = Object.prototype.toString\n\t    , flag = _.flag;\n\t\n\t  /**\n\t   * ### Language Chains\n\t   *\n\t   * The following are provided as chainable getters to\n\t   * improve the readability of your assertions. They\n\t   * do not provide testing capabilities unless they\n\t   * have been overwritten by a plugin.\n\t   *\n\t   * **Chains**\n\t   *\n\t   * - to\n\t   * - be\n\t   * - been\n\t   * - is\n\t   * - that\n\t   * - which\n\t   * - and\n\t   * - has\n\t   * - have\n\t   * - with\n\t   * - at\n\t   * - of\n\t   * - same\n\t   *\n\t   * @name language chains\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  [ 'to', 'be', 'been'\n\t  , 'is', 'and', 'has', 'have'\n\t  , 'with', 'that', 'which', 'at'\n\t  , 'of', 'same' ].forEach(function (chain) {\n\t    Assertion.addProperty(chain, function () {\n\t      return this;\n\t    });\n\t  });\n\t\n\t  /**\n\t   * ### .not\n\t   *\n\t   * Negates any of assertions following in the chain.\n\t   *\n\t   *     expect(foo).to.not.equal('bar');\n\t   *     expect(goodFn).to.not.throw(Error);\n\t   *     expect({ foo: 'baz' }).to.have.property('foo')\n\t   *       .and.not.equal('bar');\n\t   *\n\t   * @name not\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('not', function () {\n\t    flag(this, 'negate', true);\n\t  });\n\t\n\t  /**\n\t   * ### .deep\n\t   *\n\t   * Sets the `deep` flag, later used by the `equal` and\n\t   * `property` assertions.\n\t   *\n\t   *     expect(foo).to.deep.equal({ bar: 'baz' });\n\t   *     expect({ foo: { bar: { baz: 'quux' } } })\n\t   *       .to.have.deep.property('foo.bar.baz', 'quux');\n\t   *\n\t   * `.deep.property` special characters can be escaped\n\t   * by adding two slashes before the `.` or `[]`.\n\t   *\n\t   *     var deepCss = { '.link': { '[target]': 42 }};\n\t   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n\t   *\n\t   * @name deep\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('deep', function () {\n\t    flag(this, 'deep', true);\n\t  });\n\t\n\t  /**\n\t   * ### .any\n\t   *\n\t   * Sets the `any` flag, (opposite of the `all` flag)\n\t   * later used in the `keys` assertion.\n\t   *\n\t   *     expect(foo).to.have.any.keys('bar', 'baz');\n\t   *\n\t   * @name any\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('any', function () {\n\t    flag(this, 'any', true);\n\t    flag(this, 'all', false)\n\t  });\n\t\n\t\n\t  /**\n\t   * ### .all\n\t   *\n\t   * Sets the `all` flag (opposite of the `any` flag)\n\t   * later used by the `keys` assertion.\n\t   *\n\t   *     expect(foo).to.have.all.keys('bar', 'baz');\n\t   *\n\t   * @name all\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('all', function () {\n\t    flag(this, 'all', true);\n\t    flag(this, 'any', false);\n\t  });\n\t\n\t  /**\n\t   * ### .a(type)\n\t   *\n\t   * The `a` and `an` assertions are aliases that can be\n\t   * used either as language chains or to assert a value's\n\t   * type.\n\t   *\n\t   *     // typeof\n\t   *     expect('test').to.be.a('string');\n\t   *     expect({ foo: 'bar' }).to.be.an('object');\n\t   *     expect(null).to.be.a('null');\n\t   *     expect(undefined).to.be.an('undefined');\n\t   *     expect(new Error).to.be.an('error');\n\t   *     expect(new Promise).to.be.a('promise');\n\t   *     expect(new Float32Array()).to.be.a('float32array');\n\t   *     expect(Symbol()).to.be.a('symbol');\n\t   *\n\t   *     // es6 overrides\n\t   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n\t   *\n\t   *     // language chain\n\t   *     expect(foo).to.be.an.instanceof(Foo);\n\t   *\n\t   * @name a\n\t   * @alias an\n\t   * @param {String} type\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function an (type, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    type = type.toLowerCase();\n\t    var obj = flag(this, 'object')\n\t      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\t\n\t    this.assert(\n\t        type === _.type(obj)\n\t      , 'expected #{this} to be ' + article + type\n\t      , 'expected #{this} not to be ' + article + type\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableMethod('an', an);\n\t  Assertion.addChainableMethod('a', an);\n\t\n\t  /**\n\t   * ### .include(value)\n\t   *\n\t   * The `include` and `contain` assertions can be used as either property\n\t   * based language chains or as methods to assert the inclusion of an object\n\t   * in an array or a substring in a string. When used as language chains,\n\t   * they toggle the `contains` flag for the `keys` assertion.\n\t   *\n\t   *     expect([1,2,3]).to.include(2);\n\t   *     expect('foobar').to.contain('foo');\n\t   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n\t   *\n\t   * @name include\n\t   * @alias contain\n\t   * @alias includes\n\t   * @alias contains\n\t   * @param {Object|String|Number} obj\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function includeChainingBehavior () {\n\t    flag(this, 'contains', true);\n\t  }\n\t\n\t  function include (val, msg) {\n\t    _.expectTypes(this, ['array', 'object', 'string']);\n\t\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    var expected = false;\n\t\n\t    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n\t      for (var i in obj) {\n\t        if (_.eql(obj[i], val)) {\n\t          expected = true;\n\t          break;\n\t        }\n\t      }\n\t    } else if (_.type(val) === 'object') {\n\t      if (!flag(this, 'negate')) {\n\t        for (var k in val) new Assertion(obj).property(k, val[k]);\n\t        return;\n\t      }\n\t      var subset = {};\n\t      for (var k in val) subset[k] = obj[k];\n\t      expected = _.eql(subset, val);\n\t    } else {\n\t      expected = (obj != undefined) && ~obj.indexOf(val);\n\t    }\n\t    this.assert(\n\t        expected\n\t      , 'expected #{this} to include ' + _.inspect(val)\n\t      , 'expected #{this} to not include ' + _.inspect(val));\n\t  }\n\t\n\t  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n\t  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n\t  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n\t  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\t\n\t  /**\n\t   * ### .ok\n\t   *\n\t   * Asserts that the target is truthy.\n\t   *\n\t   *     expect('everything').to.be.ok;\n\t   *     expect(1).to.be.ok;\n\t   *     expect(false).to.not.be.ok;\n\t   *     expect(undefined).to.not.be.ok;\n\t   *     expect(null).to.not.be.ok;\n\t   *\n\t   * @name ok\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('ok', function () {\n\t    this.assert(\n\t        flag(this, 'object')\n\t      , 'expected #{this} to be truthy'\n\t      , 'expected #{this} to be falsy');\n\t  });\n\t\n\t  /**\n\t   * ### .true\n\t   *\n\t   * Asserts that the target is `true`.\n\t   *\n\t   *     expect(true).to.be.true;\n\t   *     expect(1).to.not.be.true;\n\t   *\n\t   * @name true\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('true', function () {\n\t    this.assert(\n\t        true === flag(this, 'object')\n\t      , 'expected #{this} to be true'\n\t      , 'expected #{this} to be false'\n\t      , this.negate ? false : true\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .false\n\t   *\n\t   * Asserts that the target is `false`.\n\t   *\n\t   *     expect(false).to.be.false;\n\t   *     expect(0).to.not.be.false;\n\t   *\n\t   * @name false\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('false', function () {\n\t    this.assert(\n\t        false === flag(this, 'object')\n\t      , 'expected #{this} to be false'\n\t      , 'expected #{this} to be true'\n\t      , this.negate ? true : false\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .null\n\t   *\n\t   * Asserts that the target is `null`.\n\t   *\n\t   *     expect(null).to.be.null;\n\t   *     expect(undefined).to.not.be.null;\n\t   *\n\t   * @name null\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('null', function () {\n\t    this.assert(\n\t        null === flag(this, 'object')\n\t      , 'expected #{this} to be null'\n\t      , 'expected #{this} not to be null'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .undefined\n\t   *\n\t   * Asserts that the target is `undefined`.\n\t   *\n\t   *     expect(undefined).to.be.undefined;\n\t   *     expect(null).to.not.be.undefined;\n\t   *\n\t   * @name undefined\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('undefined', function () {\n\t    this.assert(\n\t        undefined === flag(this, 'object')\n\t      , 'expected #{this} to be undefined'\n\t      , 'expected #{this} not to be undefined'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .NaN\n\t   * Asserts that the target is `NaN`.\n\t   *\n\t   *     expect('foo').to.be.NaN;\n\t   *     expect(4).not.to.be.NaN;\n\t   *\n\t   * @name NaN\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('NaN', function () {\n\t    this.assert(\n\t        isNaN(flag(this, 'object'))\n\t        , 'expected #{this} to be NaN'\n\t        , 'expected #{this} not to be NaN'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .exist\n\t   *\n\t   * Asserts that the target is neither `null` nor `undefined`.\n\t   *\n\t   *     var foo = 'hi'\n\t   *       , bar = null\n\t   *       , baz;\n\t   *\n\t   *     expect(foo).to.exist;\n\t   *     expect(bar).to.not.exist;\n\t   *     expect(baz).to.not.exist;\n\t   *\n\t   * @name exist\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('exist', function () {\n\t    this.assert(\n\t        null != flag(this, 'object')\n\t      , 'expected #{this} to exist'\n\t      , 'expected #{this} to not exist'\n\t    );\n\t  });\n\t\n\t\n\t  /**\n\t   * ### .empty\n\t   *\n\t   * Asserts that the target's length is `0`. For arrays and strings, it checks\n\t   * the `length` property. For objects, it gets the count of\n\t   * enumerable keys.\n\t   *\n\t   *     expect([]).to.be.empty;\n\t   *     expect('').to.be.empty;\n\t   *     expect({}).to.be.empty;\n\t   *\n\t   * @name empty\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('empty', function () {\n\t    var obj = flag(this, 'object')\n\t      , expected = obj;\n\t\n\t    if (Array.isArray(obj) || 'string' === typeof object) {\n\t      expected = obj.length;\n\t    } else if (typeof obj === 'object') {\n\t      expected = Object.keys(obj).length;\n\t    }\n\t\n\t    this.assert(\n\t        !expected\n\t      , 'expected #{this} to be empty'\n\t      , 'expected #{this} not to be empty'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .arguments\n\t   *\n\t   * Asserts that the target is an arguments object.\n\t   *\n\t   *     function test () {\n\t   *       expect(arguments).to.be.arguments;\n\t   *     }\n\t   *\n\t   * @name arguments\n\t   * @alias Arguments\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function checkArguments () {\n\t    var obj = flag(this, 'object')\n\t      , type = Object.prototype.toString.call(obj);\n\t    this.assert(\n\t        '[object Arguments]' === type\n\t      , 'expected #{this} to be arguments but got ' + type\n\t      , 'expected #{this} to not be arguments'\n\t    );\n\t  }\n\t\n\t  Assertion.addProperty('arguments', checkArguments);\n\t  Assertion.addProperty('Arguments', checkArguments);\n\t\n\t  /**\n\t   * ### .equal(value)\n\t   *\n\t   * Asserts that the target is strictly equal (`===`) to `value`.\n\t   * Alternately, if the `deep` flag is set, asserts that\n\t   * the target is deeply equal to `value`.\n\t   *\n\t   *     expect('hello').to.equal('hello');\n\t   *     expect(42).to.equal(42);\n\t   *     expect(1).to.not.equal(true);\n\t   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n\t   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n\t   *\n\t   * @name equal\n\t   * @alias equals\n\t   * @alias eq\n\t   * @alias deep.equal\n\t   * @param {Mixed} value\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertEqual (val, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'deep')) {\n\t      return this.eql(val);\n\t    } else {\n\t      this.assert(\n\t          val === obj\n\t        , 'expected #{this} to equal #{exp}'\n\t        , 'expected #{this} to not equal #{exp}'\n\t        , val\n\t        , this._obj\n\t        , true\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('equal', assertEqual);\n\t  Assertion.addMethod('equals', assertEqual);\n\t  Assertion.addMethod('eq', assertEqual);\n\t\n\t  /**\n\t   * ### .eql(value)\n\t   *\n\t   * Asserts that the target is deeply equal to `value`.\n\t   *\n\t   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n\t   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n\t   *\n\t   * @name eql\n\t   * @alias eqls\n\t   * @param {Mixed} value\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertEql(obj, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    this.assert(\n\t        _.eql(obj, flag(this, 'object'))\n\t      , 'expected #{this} to deeply equal #{exp}'\n\t      , 'expected #{this} to not deeply equal #{exp}'\n\t      , obj\n\t      , this._obj\n\t      , true\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('eql', assertEql);\n\t  Assertion.addMethod('eqls', assertEql);\n\t\n\t  /**\n\t   * ### .above(value)\n\t   *\n\t   * Asserts that the target is greater than `value`.\n\t   *\n\t   *     expect(10).to.be.above(5);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a minimum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.above(2);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n\t   *\n\t   * @name above\n\t   * @alias gt\n\t   * @alias greaterThan\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertAbove (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len > n\n\t        , 'expected #{this} to have a length above #{exp} but got #{act}'\n\t        , 'expected #{this} to not have a length above #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj > n\n\t        , 'expected #{this} to be above ' + n\n\t        , 'expected #{this} to be at most ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('above', assertAbove);\n\t  Assertion.addMethod('gt', assertAbove);\n\t  Assertion.addMethod('greaterThan', assertAbove);\n\t\n\t  /**\n\t   * ### .least(value)\n\t   *\n\t   * Asserts that the target is greater than or equal to `value`.\n\t   *\n\t   *     expect(10).to.be.at.least(10);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a minimum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.of.at.least(2);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n\t   *\n\t   * @name least\n\t   * @alias gte\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertLeast (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len >= n\n\t        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n\t        , 'expected #{this} to have a length below #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj >= n\n\t        , 'expected #{this} to be at least ' + n\n\t        , 'expected #{this} to be below ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('least', assertLeast);\n\t  Assertion.addMethod('gte', assertLeast);\n\t\n\t  /**\n\t   * ### .below(value)\n\t   *\n\t   * Asserts that the target is less than `value`.\n\t   *\n\t   *     expect(5).to.be.below(10);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a maximum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.below(4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n\t   *\n\t   * @name below\n\t   * @alias lt\n\t   * @alias lessThan\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertBelow (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len < n\n\t        , 'expected #{this} to have a length below #{exp} but got #{act}'\n\t        , 'expected #{this} to not have a length below #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj < n\n\t        , 'expected #{this} to be below ' + n\n\t        , 'expected #{this} to be at least ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('below', assertBelow);\n\t  Assertion.addMethod('lt', assertBelow);\n\t  Assertion.addMethod('lessThan', assertBelow);\n\t\n\t  /**\n\t   * ### .most(value)\n\t   *\n\t   * Asserts that the target is less than or equal to `value`.\n\t   *\n\t   *     expect(5).to.be.at.most(5);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a maximum length. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.of.at.most(4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n\t   *\n\t   * @name most\n\t   * @alias lte\n\t   * @param {Number} value\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertMost (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len <= n\n\t        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n\t        , 'expected #{this} to have a length above #{exp}'\n\t        , n\n\t        , len\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj <= n\n\t        , 'expected #{this} to be at most ' + n\n\t        , 'expected #{this} to be above ' + n\n\t      );\n\t    }\n\t  }\n\t\n\t  Assertion.addMethod('most', assertMost);\n\t  Assertion.addMethod('lte', assertMost);\n\t\n\t  /**\n\t   * ### .within(start, finish)\n\t   *\n\t   * Asserts that the target is within a range.\n\t   *\n\t   *     expect(7).to.be.within(5,10);\n\t   *\n\t   * Can also be used in conjunction with `length` to\n\t   * assert a length range. The benefit being a\n\t   * more informative error message than if the length\n\t   * was supplied directly.\n\t   *\n\t   *     expect('foo').to.have.length.within(2,4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n\t   *\n\t   * @name within\n\t   * @param {Number} start lowerbound inclusive\n\t   * @param {Number} finish upperbound inclusive\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('within', function (start, finish, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object')\n\t      , range = start + '..' + finish;\n\t    if (flag(this, 'doLength')) {\n\t      new Assertion(obj, msg).to.have.property('length');\n\t      var len = obj.length;\n\t      this.assert(\n\t          len >= start && len <= finish\n\t        , 'expected #{this} to have a length within ' + range\n\t        , 'expected #{this} to not have a length within ' + range\n\t      );\n\t    } else {\n\t      this.assert(\n\t          obj >= start && obj <= finish\n\t        , 'expected #{this} to be within ' + range\n\t        , 'expected #{this} to not be within ' + range\n\t      );\n\t    }\n\t  });\n\t\n\t  /**\n\t   * ### .instanceof(constructor)\n\t   *\n\t   * Asserts that the target is an instance of `constructor`.\n\t   *\n\t   *     var Tea = function (name) { this.name = name; }\n\t   *       , Chai = new Tea('chai');\n\t   *\n\t   *     expect(Chai).to.be.an.instanceof(Tea);\n\t   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n\t   *\n\t   * @name instanceof\n\t   * @param {Constructor} constructor\n\t   * @param {String} message _optional_\n\t   * @alias instanceOf\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertInstanceOf (constructor, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var name = _.getName(constructor);\n\t    this.assert(\n\t        flag(this, 'object') instanceof constructor\n\t      , 'expected #{this} to be an instance of ' + name\n\t      , 'expected #{this} to not be an instance of ' + name\n\t    );\n\t  };\n\t\n\t  Assertion.addMethod('instanceof', assertInstanceOf);\n\t  Assertion.addMethod('instanceOf', assertInstanceOf);\n\t\n\t  /**\n\t   * ### .property(name, [value])\n\t   *\n\t   * Asserts that the target has a property `name`, optionally asserting that\n\t   * the value of that property is strictly equal to  `value`.\n\t   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n\t   * references into objects and arrays.\n\t   *\n\t   *     // simple referencing\n\t   *     var obj = { foo: 'bar' };\n\t   *     expect(obj).to.have.property('foo');\n\t   *     expect(obj).to.have.property('foo', 'bar');\n\t   *\n\t   *     // deep referencing\n\t   *     var deepObj = {\n\t   *         green: { tea: 'matcha' }\n\t   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n\t   *     };\n\t   *\n\t   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n\t   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n\t   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n\t   *\n\t   * You can also use an array as the starting point of a `deep.property`\n\t   * assertion, or traverse nested arrays.\n\t   *\n\t   *     var arr = [\n\t   *         [ 'chai', 'matcha', 'konacha' ]\n\t   *       , [ { tea: 'chai' }\n\t   *         , { tea: 'matcha' }\n\t   *         , { tea: 'konacha' } ]\n\t   *     ];\n\t   *\n\t   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n\t   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n\t   *\n\t   * Furthermore, `property` changes the subject of the assertion\n\t   * to be the value of that property from the original object. This\n\t   * permits for further chainable assertions on that property.\n\t   *\n\t   *     expect(obj).to.have.property('foo')\n\t   *       .that.is.a('string');\n\t   *     expect(deepObj).to.have.property('green')\n\t   *       .that.is.an('object')\n\t   *       .that.deep.equals({ tea: 'matcha' });\n\t   *     expect(deepObj).to.have.property('teas')\n\t   *       .that.is.an('array')\n\t   *       .with.deep.property('[2]')\n\t   *         .that.deep.equals({ tea: 'konacha' });\n\t   *\n\t   * Note that dots and bracket in `name` must be backslash-escaped when\n\t   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n\t   * flag is not set.\n\t   *\n\t   *     // simple referencing\n\t   *     var css = { '.link[target]': 42 };\n\t   *     expect(css).to.have.property('.link[target]', 42);\n\t   *\n\t   *     // deep referencing\n\t   *     var deepCss = { '.link': { '[target]': 42 }};\n\t   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n\t   *\n\t   * @name property\n\t   * @alias deep.property\n\t   * @param {String} name\n\t   * @param {Mixed} value (optional)\n\t   * @param {String} message _optional_\n\t   * @returns value of property for chaining\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('property', function (name, val, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t\n\t    var isDeep = !!flag(this, 'deep')\n\t      , descriptor = isDeep ? 'deep property ' : 'property '\n\t      , negate = flag(this, 'negate')\n\t      , obj = flag(this, 'object')\n\t      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n\t      , hasProperty = isDeep\n\t        ? pathInfo.exists\n\t        : _.hasProperty(name, obj)\n\t      , value = isDeep\n\t        ? pathInfo.value\n\t        : obj[name];\n\t\n\t    if (negate && arguments.length > 1) {\n\t      if (undefined === value) {\n\t        msg = (msg != null) ? msg + ': ' : '';\n\t        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n\t      }\n\t    } else {\n\t      this.assert(\n\t          hasProperty\n\t        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n\t        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n\t    }\n\t\n\t    if (arguments.length > 1) {\n\t      this.assert(\n\t          val === value\n\t        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n\t        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n\t        , val\n\t        , value\n\t      );\n\t    }\n\t\n\t    flag(this, 'object', value);\n\t  });\n\t\n\t\n\t  /**\n\t   * ### .ownProperty(name)\n\t   *\n\t   * Asserts that the target has an own property `name`.\n\t   *\n\t   *     expect('test').to.have.ownProperty('length');\n\t   *\n\t   * @name ownProperty\n\t   * @alias haveOwnProperty\n\t   * @param {String} name\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertOwnProperty (name, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    this.assert(\n\t        obj.hasOwnProperty(name)\n\t      , 'expected #{this} to have own property ' + _.inspect(name)\n\t      , 'expected #{this} to not have own property ' + _.inspect(name)\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('ownProperty', assertOwnProperty);\n\t  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\t\n\t  /**\n\t   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n\t   *\n\t   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n\t   *\n\t   *     expect('test').to.have.ownPropertyDescriptor('length');\n\t   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n\t   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n\t   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n\t   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n\t   *\n\t   * @name ownPropertyDescriptor\n\t   * @alias haveOwnPropertyDescriptor\n\t   * @param {String} name\n\t   * @param {Object} descriptor _optional_\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n\t    if (typeof descriptor === 'string') {\n\t      msg = descriptor;\n\t      descriptor = null;\n\t    }\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n\t    if (actualDescriptor && descriptor) {\n\t      this.assert(\n\t          _.eql(descriptor, actualDescriptor)\n\t        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n\t        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n\t        , descriptor\n\t        , actualDescriptor\n\t        , true\n\t      );\n\t    } else {\n\t      this.assert(\n\t          actualDescriptor\n\t        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n\t        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n\t      );\n\t    }\n\t    flag(this, 'object', actualDescriptor);\n\t  }\n\t\n\t  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n\t  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\t\n\t  /**\n\t   * ### .length\n\t   *\n\t   * Sets the `doLength` flag later used as a chain precursor to a value\n\t   * comparison for the `length` property.\n\t   *\n\t   *     expect('foo').to.have.length.above(2);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n\t   *     expect('foo').to.have.length.below(4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n\t   *     expect('foo').to.have.length.within(2,4);\n\t   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n\t   *\n\t   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n\t   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n\t   * asserting for `length` property value using `length(value)` should be\n\t   * switched to use `lengthOf(value)` instead.\n\t   *\n\t   * @name length\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  /**\n\t   * ### .lengthOf(value[, message])\n\t   *\n\t   * Asserts that the target's `length` property has\n\t   * the expected value.\n\t   *\n\t   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n\t   *     expect('foobar').to.have.lengthOf(6);\n\t   *\n\t   * @name lengthOf\n\t   * @param {Number} length\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertLengthChain () {\n\t    flag(this, 'doLength', true);\n\t  }\n\t\n\t  function assertLength (n, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    new Assertion(obj, msg).to.have.property('length');\n\t    var len = obj.length;\n\t\n\t    this.assert(\n\t        len == n\n\t      , 'expected #{this} to have a length of #{exp} but got #{act}'\n\t      , 'expected #{this} to not have a length of #{act}'\n\t      , n\n\t      , len\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n\t  Assertion.addMethod('lengthOf', assertLength);\n\t\n\t  /**\n\t   * ### .match(regexp)\n\t   *\n\t   * Asserts that the target matches a regular expression.\n\t   *\n\t   *     expect('foobar').to.match(/^foo/);\n\t   *\n\t   * @name match\n\t   * @alias matches\n\t   * @param {RegExp} RegularExpression\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t  function assertMatch(re, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    this.assert(\n\t        re.exec(obj)\n\t      , 'expected #{this} to match ' + re\n\t      , 'expected #{this} not to match ' + re\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('match', assertMatch);\n\t  Assertion.addMethod('matches', assertMatch);\n\t\n\t  /**\n\t   * ### .string(string)\n\t   *\n\t   * Asserts that the string target contains another string.\n\t   *\n\t   *     expect('foobar').to.have.string('bar');\n\t   *\n\t   * @name string\n\t   * @param {String} string\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('string', function (str, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    new Assertion(obj, msg).is.a('string');\n\t\n\t    this.assert(\n\t        ~obj.indexOf(str)\n\t      , 'expected #{this} to contain ' + _.inspect(str)\n\t      , 'expected #{this} to not contain ' + _.inspect(str)\n\t    );\n\t  });\n\t\n\t\n\t  /**\n\t   * ### .keys(key1, [key2], [...])\n\t   *\n\t   * Asserts that the target contains any or all of the passed-in keys.\n\t   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n\t   * what will pass.\n\t   *\n\t   * When used in conjunction with `any`, at least one key that is passed\n\t   * in must exist in the target object. This is regardless whether or not\n\t   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n\t   * should be used in the assertion. If neither are used, the assertion is\n\t   * defaulted to `all`.\n\t   *\n\t   * When both `all` and `contain` are used, the target object must have at\n\t   * least all of the passed-in keys but may have more keys not listed.\n\t   *\n\t   * When both `all` and `have` are used, the target object must both contain\n\t   * all of the passed-in keys AND the number of keys in the target object must\n\t   * match the number of keys passed in (in other words, a target object must\n\t   * have all and only all of the passed-in keys).\n\t   *\n\t   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n\t   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n\t   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n\t   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n\t   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n\t   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n\t   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n\t   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n\t   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n\t   *\n\t   *\n\t   * @name keys\n\t   * @alias key\n\t   * @param {...String|Array|Object} keys\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertKeys (keys) {\n\t    var obj = flag(this, 'object')\n\t      , str\n\t      , ok = true\n\t      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\t\n\t    switch (_.type(keys)) {\n\t      case \"array\":\n\t        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n\t        break;\n\t      case \"object\":\n\t        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n\t        keys = Object.keys(keys);\n\t        break;\n\t      default:\n\t        keys = Array.prototype.slice.call(arguments);\n\t    }\n\t\n\t    if (!keys.length) throw new Error('keys required');\n\t\n\t    var actual = Object.keys(obj)\n\t      , expected = keys\n\t      , len = keys.length\n\t      , any = flag(this, 'any')\n\t      , all = flag(this, 'all');\n\t\n\t    if (!any && !all) {\n\t      all = true;\n\t    }\n\t\n\t    // Has any\n\t    if (any) {\n\t      var intersection = expected.filter(function(key) {\n\t        return ~actual.indexOf(key);\n\t      });\n\t      ok = intersection.length > 0;\n\t    }\n\t\n\t    // Has all\n\t    if (all) {\n\t      ok = keys.every(function(key){\n\t        return ~actual.indexOf(key);\n\t      });\n\t      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n\t        ok = ok && keys.length == actual.length;\n\t      }\n\t    }\n\t\n\t    // Key string\n\t    if (len > 1) {\n\t      keys = keys.map(function(key){\n\t        return _.inspect(key);\n\t      });\n\t      var last = keys.pop();\n\t      if (all) {\n\t        str = keys.join(', ') + ', and ' + last;\n\t      }\n\t      if (any) {\n\t        str = keys.join(', ') + ', or ' + last;\n\t      }\n\t    } else {\n\t      str = _.inspect(keys[0]);\n\t    }\n\t\n\t    // Form\n\t    str = (len > 1 ? 'keys ' : 'key ') + str;\n\t\n\t    // Have / include\n\t    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\t\n\t    // Assertion\n\t    this.assert(\n\t        ok\n\t      , 'expected #{this} to ' + str\n\t      , 'expected #{this} to not ' + str\n\t      , expected.slice(0).sort()\n\t      , actual.sort()\n\t      , true\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('keys', assertKeys);\n\t  Assertion.addMethod('key', assertKeys);\n\t\n\t  /**\n\t   * ### .throw(constructor)\n\t   *\n\t   * Asserts that the function target will throw a specific error, or specific type of error\n\t   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n\t   * for the error's message.\n\t   *\n\t   *     var err = new ReferenceError('This is a bad function.');\n\t   *     var fn = function () { throw err; }\n\t   *     expect(fn).to.throw(ReferenceError);\n\t   *     expect(fn).to.throw(Error);\n\t   *     expect(fn).to.throw(/bad function/);\n\t   *     expect(fn).to.not.throw('good function');\n\t   *     expect(fn).to.throw(ReferenceError, /bad function/);\n\t   *     expect(fn).to.throw(err);\n\t   *\n\t   * Please note that when a throw expectation is negated, it will check each\n\t   * parameter independently, starting with error constructor type. The appropriate way\n\t   * to check for the existence of a type of error but for a message that does not match\n\t   * is to use `and`.\n\t   *\n\t   *     expect(fn).to.throw(ReferenceError)\n\t   *        .and.not.throw(/good function/);\n\t   *\n\t   * @name throw\n\t   * @alias throws\n\t   * @alias Throw\n\t   * @param {ErrorConstructor} constructor\n\t   * @param {String|RegExp} expected error message\n\t   * @param {String} message _optional_\n\t   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t   * @returns error for chaining (null if no error)\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertThrows (constructor, errMsg, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    new Assertion(obj, msg).is.a('function');\n\t\n\t    var thrown = false\n\t      , desiredError = null\n\t      , name = null\n\t      , thrownError = null;\n\t\n\t    if (arguments.length === 0) {\n\t      errMsg = null;\n\t      constructor = null;\n\t    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n\t      errMsg = constructor;\n\t      constructor = null;\n\t    } else if (constructor && constructor instanceof Error) {\n\t      desiredError = constructor;\n\t      constructor = null;\n\t      errMsg = null;\n\t    } else if (typeof constructor === 'function') {\n\t      name = constructor.prototype.name;\n\t      if (!name || (name === 'Error' && constructor !== Error)) {\n\t        name = constructor.name || (new constructor()).name;\n\t      }\n\t    } else {\n\t      constructor = null;\n\t    }\n\t\n\t    try {\n\t      obj();\n\t    } catch (err) {\n\t      // first, check desired error\n\t      if (desiredError) {\n\t        this.assert(\n\t            err === desiredError\n\t          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n\t          , 'expected #{this} to not throw #{exp}'\n\t          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n\t          , (err instanceof Error ? err.toString() : err)\n\t        );\n\t\n\t        flag(this, 'object', err);\n\t        return this;\n\t      }\n\t\n\t      // next, check constructor\n\t      if (constructor) {\n\t        this.assert(\n\t            err instanceof constructor\n\t          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n\t          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n\t          , name\n\t          , (err instanceof Error ? err.toString() : err)\n\t        );\n\t\n\t        if (!errMsg) {\n\t          flag(this, 'object', err);\n\t          return this;\n\t        }\n\t      }\n\t\n\t      // next, check message\n\t      var message = 'error' === _.type(err) && \"message\" in err\n\t        ? err.message\n\t        : '' + err;\n\t\n\t      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n\t        this.assert(\n\t            errMsg.exec(message)\n\t          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n\t          , 'expected #{this} to throw error not matching #{exp}'\n\t          , errMsg\n\t          , message\n\t        );\n\t\n\t        flag(this, 'object', err);\n\t        return this;\n\t      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n\t        this.assert(\n\t            ~message.indexOf(errMsg)\n\t          , 'expected #{this} to throw error including #{exp} but got #{act}'\n\t          , 'expected #{this} to throw error not including #{act}'\n\t          , errMsg\n\t          , message\n\t        );\n\t\n\t        flag(this, 'object', err);\n\t        return this;\n\t      } else {\n\t        thrown = true;\n\t        thrownError = err;\n\t      }\n\t    }\n\t\n\t    var actuallyGot = ''\n\t      , expectedThrown = name !== null\n\t        ? name\n\t        : desiredError\n\t          ? '#{exp}' //_.inspect(desiredError)\n\t          : 'an error';\n\t\n\t    if (thrown) {\n\t      actuallyGot = ' but #{act} was thrown'\n\t    }\n\t\n\t    this.assert(\n\t        thrown === true\n\t      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n\t      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n\t      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n\t      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n\t    );\n\t\n\t    flag(this, 'object', thrownError);\n\t  };\n\t\n\t  Assertion.addMethod('throw', assertThrows);\n\t  Assertion.addMethod('throws', assertThrows);\n\t  Assertion.addMethod('Throw', assertThrows);\n\t\n\t  /**\n\t   * ### .respondTo(method)\n\t   *\n\t   * Asserts that the object or class target will respond to a method.\n\t   *\n\t   *     Klass.prototype.bar = function(){};\n\t   *     expect(Klass).to.respondTo('bar');\n\t   *     expect(obj).to.respondTo('bar');\n\t   *\n\t   * To check if a constructor will respond to a static function,\n\t   * set the `itself` flag.\n\t   *\n\t   *     Klass.baz = function(){};\n\t   *     expect(Klass).itself.to.respondTo('baz');\n\t   *\n\t   * @name respondTo\n\t   * @alias respondsTo\n\t   * @param {String} method\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function respondTo (method, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object')\n\t      , itself = flag(this, 'itself')\n\t      , context = ('function' === _.type(obj) && !itself)\n\t        ? obj.prototype[method]\n\t        : obj[method];\n\t\n\t    this.assert(\n\t        'function' === typeof context\n\t      , 'expected #{this} to respond to ' + _.inspect(method)\n\t      , 'expected #{this} to not respond to ' + _.inspect(method)\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('respondTo', respondTo);\n\t  Assertion.addMethod('respondsTo', respondTo);\n\t\n\t  /**\n\t   * ### .itself\n\t   *\n\t   * Sets the `itself` flag, later used by the `respondTo` assertion.\n\t   *\n\t   *     function Foo() {}\n\t   *     Foo.bar = function() {}\n\t   *     Foo.prototype.baz = function() {}\n\t   *\n\t   *     expect(Foo).itself.to.respondTo('bar');\n\t   *     expect(Foo).itself.not.to.respondTo('baz');\n\t   *\n\t   * @name itself\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('itself', function () {\n\t    flag(this, 'itself', true);\n\t  });\n\t\n\t  /**\n\t   * ### .satisfy(method)\n\t   *\n\t   * Asserts that the target passes a given truth test.\n\t   *\n\t   *     expect(1).to.satisfy(function(num) { return num > 0; });\n\t   *\n\t   * @name satisfy\n\t   * @alias satisfies\n\t   * @param {Function} matcher\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function satisfy (matcher, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t    var result = matcher(obj);\n\t    this.assert(\n\t        result\n\t      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n\t      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n\t      , this.negate ? false : true\n\t      , result\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('satisfy', satisfy);\n\t  Assertion.addMethod('satisfies', satisfy);\n\t\n\t  /**\n\t   * ### .closeTo(expected, delta)\n\t   *\n\t   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n\t   *\n\t   *     expect(1.5).to.be.closeTo(1, 0.5);\n\t   *\n\t   * @name closeTo\n\t   * @alias approximately\n\t   * @param {Number} expected\n\t   * @param {Number} delta\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function closeTo(expected, delta, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t\n\t    new Assertion(obj, msg).is.a('number');\n\t    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n\t      throw new Error('the arguments to closeTo or approximately must be numbers');\n\t    }\n\t\n\t    this.assert(\n\t        Math.abs(obj - expected) <= delta\n\t      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n\t      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('closeTo', closeTo);\n\t  Assertion.addMethod('approximately', closeTo);\n\t\n\t  function isSubsetOf(subset, superset, cmp) {\n\t    return subset.every(function(elem) {\n\t      if (!cmp) return superset.indexOf(elem) !== -1;\n\t\n\t      return superset.some(function(elem2) {\n\t        return cmp(elem, elem2);\n\t      });\n\t    })\n\t  }\n\t\n\t  /**\n\t   * ### .members(set)\n\t   *\n\t   * Asserts that the target is a superset of `set`,\n\t   * or that the target and `set` have the same strictly-equal (===) members.\n\t   * Alternately, if the `deep` flag is set, set members are compared for deep\n\t   * equality.\n\t   *\n\t   *     expect([1, 2, 3]).to.include.members([3, 2]);\n\t   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\t   *\n\t   *     expect([4, 2]).to.have.members([2, 4]);\n\t   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n\t   *\n\t   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n\t   *\n\t   * @name members\n\t   * @param {Array} set\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addMethod('members', function (subset, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var obj = flag(this, 'object');\n\t\n\t    new Assertion(obj).to.be.an('array');\n\t    new Assertion(subset).to.be.an('array');\n\t\n\t    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\t\n\t    if (flag(this, 'contains')) {\n\t      return this.assert(\n\t          isSubsetOf(subset, obj, cmp)\n\t        , 'expected #{this} to be a superset of #{act}'\n\t        , 'expected #{this} to not be a superset of #{act}'\n\t        , obj\n\t        , subset\n\t      );\n\t    }\n\t\n\t    this.assert(\n\t        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n\t        , 'expected #{this} to have the same members as #{act}'\n\t        , 'expected #{this} to not have the same members as #{act}'\n\t        , obj\n\t        , subset\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .oneOf(list)\n\t   *\n\t   * Assert that a value appears somewhere in the top level of array `list`.\n\t   *\n\t   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n\t   *     expect(9).to.not.be.oneOf(['z']);\n\t   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n\t   *\n\t   *     var three = [3];\n\t   *     // for object-types, contents are not compared\n\t   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n\t   *     // comparing references works\n\t   *     expect(three).to.be.oneOf([1, 2, three]);\n\t   *\n\t   * @name oneOf\n\t   * @param {Array<*>} list\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function oneOf (list, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var expected = flag(this, 'object');\n\t    new Assertion(list).to.be.an('array');\n\t\n\t    this.assert(\n\t        list.indexOf(expected) > -1\n\t      , 'expected #{this} to be one of #{exp}'\n\t      , 'expected #{this} to not be one of #{exp}'\n\t      , list\n\t      , expected\n\t    );\n\t  }\n\t\n\t  Assertion.addMethod('oneOf', oneOf);\n\t\n\t\n\t  /**\n\t   * ### .change(function)\n\t   *\n\t   * Asserts that a function changes an object property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val += 3 };\n\t   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n\t   *     expect(fn).to.change(obj, 'val');\n\t   *     expect(noChangeFn).to.not.change(obj, 'val')\n\t   *\n\t   * @name change\n\t   * @alias changes\n\t   * @alias Change\n\t   * @param {String} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertChanges (object, prop, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var fn = flag(this, 'object');\n\t    new Assertion(object, msg).to.have.property(prop);\n\t    new Assertion(fn).is.a('function');\n\t\n\t    var initial = object[prop];\n\t    fn();\n\t\n\t    this.assert(\n\t      initial !== object[prop]\n\t      , 'expected .' + prop + ' to change'\n\t      , 'expected .' + prop + ' to not change'\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableMethod('change', assertChanges);\n\t  Assertion.addChainableMethod('changes', assertChanges);\n\t\n\t  /**\n\t   * ### .increase(function)\n\t   *\n\t   * Asserts that a function increases an object property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val = 15 };\n\t   *     expect(fn).to.increase(obj, 'val');\n\t   *\n\t   * @name increase\n\t   * @alias increases\n\t   * @alias Increase\n\t   * @param {String} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertIncreases (object, prop, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var fn = flag(this, 'object');\n\t    new Assertion(object, msg).to.have.property(prop);\n\t    new Assertion(fn).is.a('function');\n\t\n\t    var initial = object[prop];\n\t    fn();\n\t\n\t    this.assert(\n\t      object[prop] - initial > 0\n\t      , 'expected .' + prop + ' to increase'\n\t      , 'expected .' + prop + ' to not increase'\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableMethod('increase', assertIncreases);\n\t  Assertion.addChainableMethod('increases', assertIncreases);\n\t\n\t  /**\n\t   * ### .decrease(function)\n\t   *\n\t   * Asserts that a function decreases an object property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val = 5 };\n\t   *     expect(fn).to.decrease(obj, 'val');\n\t   *\n\t   * @name decrease\n\t   * @alias decreases\n\t   * @alias Decrease\n\t   * @param {String} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  function assertDecreases (object, prop, msg) {\n\t    if (msg) flag(this, 'message', msg);\n\t    var fn = flag(this, 'object');\n\t    new Assertion(object, msg).to.have.property(prop);\n\t    new Assertion(fn).is.a('function');\n\t\n\t    var initial = object[prop];\n\t    fn();\n\t\n\t    this.assert(\n\t      object[prop] - initial < 0\n\t      , 'expected .' + prop + ' to decrease'\n\t      , 'expected .' + prop + ' to not decrease'\n\t    );\n\t  }\n\t\n\t  Assertion.addChainableMethod('decrease', assertDecreases);\n\t  Assertion.addChainableMethod('decreases', assertDecreases);\n\t\n\t  /**\n\t   * ### .extensible\n\t   *\n\t   * Asserts that the target is extensible (can have new properties added to\n\t   * it).\n\t   *\n\t   *     var nonExtensibleObject = Object.preventExtensions({});\n\t   *     var sealedObject = Object.seal({});\n\t   *     var frozenObject = Object.freeze({});\n\t   *\n\t   *     expect({}).to.be.extensible;\n\t   *     expect(nonExtensibleObject).to.not.be.extensible;\n\t   *     expect(sealedObject).to.not.be.extensible;\n\t   *     expect(frozenObject).to.not.be.extensible;\n\t   *\n\t   * @name extensible\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('extensible', function() {\n\t    var obj = flag(this, 'object');\n\t\n\t    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n\t    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n\t    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\t    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\t\n\t    var isExtensible;\n\t\n\t    try {\n\t      isExtensible = Object.isExtensible(obj);\n\t    } catch (err) {\n\t      if (err instanceof TypeError) isExtensible = false;\n\t      else throw err;\n\t    }\n\t\n\t    this.assert(\n\t      isExtensible\n\t      , 'expected #{this} to be extensible'\n\t      , 'expected #{this} to not be extensible'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .sealed\n\t   *\n\t   * Asserts that the target is sealed (cannot have new properties added to it\n\t   * and its existing properties cannot be removed).\n\t   *\n\t   *     var sealedObject = Object.seal({});\n\t   *     var frozenObject = Object.freeze({});\n\t   *\n\t   *     expect(sealedObject).to.be.sealed;\n\t   *     expect(frozenObject).to.be.sealed;\n\t   *     expect({}).to.not.be.sealed;\n\t   *\n\t   * @name sealed\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('sealed', function() {\n\t    var obj = flag(this, 'object');\n\t\n\t    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n\t    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n\t    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n\t    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\t\n\t    var isSealed;\n\t\n\t    try {\n\t      isSealed = Object.isSealed(obj);\n\t    } catch (err) {\n\t      if (err instanceof TypeError) isSealed = true;\n\t      else throw err;\n\t    }\n\t\n\t    this.assert(\n\t      isSealed\n\t      , 'expected #{this} to be sealed'\n\t      , 'expected #{this} to not be sealed'\n\t    );\n\t  });\n\t\n\t  /**\n\t   * ### .frozen\n\t   *\n\t   * Asserts that the target is frozen (cannot have new properties added to it\n\t   * and its existing properties cannot be modified).\n\t   *\n\t   *     var frozenObject = Object.freeze({});\n\t   *\n\t   *     expect(frozenObject).to.be.frozen;\n\t   *     expect({}).to.not.be.frozen;\n\t   *\n\t   * @name frozen\n\t   * @namespace BDD\n\t   * @api public\n\t   */\n\t\n\t  Assertion.addProperty('frozen', function() {\n\t    var obj = flag(this, 'object');\n\t\n\t    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n\t    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n\t    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n\t    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\t\n\t    var isFrozen;\n\t\n\t    try {\n\t      isFrozen = Object.isFrozen(obj);\n\t    } catch (err) {\n\t      if (err instanceof TypeError) isFrozen = true;\n\t      else throw err;\n\t    }\n\t\n\t    this.assert(\n\t      isFrozen\n\t      , 'expected #{this} to be frozen'\n\t      , 'expected #{this} to not be frozen'\n\t    );\n\t  });\n\t};\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tmodule.exports = function (chai, util) {\n\t  chai.expect = function (val, message) {\n\t    return new chai.Assertion(val, message);\n\t  };\n\t\n\t  /**\n\t   * ### .fail(actual, expected, [message], [operator])\n\t   *\n\t   * Throw a failure.\n\t   *\n\t   * @name fail\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @param {String} operator\n\t   * @namespace Expect\n\t   * @api public\n\t   */\n\t\n\t  chai.expect.fail = function (actual, expected, message, operator) {\n\t    message = message || 'expect.fail()';\n\t    throw new chai.AssertionError(message, {\n\t        actual: actual\n\t      , expected: expected\n\t      , operator: operator\n\t    }, chai.expect.fail);\n\t  };\n\t};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\tmodule.exports = function (chai, util) {\n\t  var Assertion = chai.Assertion;\n\t\n\t  function loadShould () {\n\t    // explicitly define this method as function as to have it's name to include as `ssfi`\n\t    function shouldGetter() {\n\t      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n\t        return new Assertion(this.valueOf(), null, shouldGetter);\n\t      }\n\t      return new Assertion(this, null, shouldGetter);\n\t    }\n\t    function shouldSetter(value) {\n\t      // See https://github.com/chaijs/chai/issues/86: this makes\n\t      // `whatever.should = someValue` actually set `someValue`, which is\n\t      // especially useful for `global.should = require('chai').should()`.\n\t      //\n\t      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n\t      // since otherwise we would trigger this very setter!\n\t      Object.defineProperty(this, 'should', {\n\t        value: value,\n\t        enumerable: true,\n\t        configurable: true,\n\t        writable: true\n\t      });\n\t    }\n\t    // modify Object.prototype to have `should`\n\t    Object.defineProperty(Object.prototype, 'should', {\n\t      set: shouldSetter\n\t      , get: shouldGetter\n\t      , configurable: true\n\t    });\n\t\n\t    var should = {};\n\t\n\t    /**\n\t     * ### .fail(actual, expected, [message], [operator])\n\t     *\n\t     * Throw a failure.\n\t     *\n\t     * @name fail\n\t     * @param {Mixed} actual\n\t     * @param {Mixed} expected\n\t     * @param {String} message\n\t     * @param {String} operator\n\t     * @namespace Should\n\t     * @api public\n\t     */\n\t\n\t    should.fail = function (actual, expected, message, operator) {\n\t      message = message || 'should.fail()';\n\t      throw new chai.AssertionError(message, {\n\t          actual: actual\n\t        , expected: expected\n\t        , operator: operator\n\t      }, should.fail);\n\t    };\n\t\n\t    /**\n\t     * ### .equal(actual, expected, [message])\n\t     *\n\t     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n\t     *\n\t     *     should.equal(3, '3', '== coerces values to strings');\n\t     *\n\t     * @name equal\n\t     * @param {Mixed} actual\n\t     * @param {Mixed} expected\n\t     * @param {String} message\n\t     * @namespace Should\n\t     * @api public\n\t     */\n\t\n\t    should.equal = function (val1, val2, msg) {\n\t      new Assertion(val1, msg).to.equal(val2);\n\t    };\n\t\n\t    /**\n\t     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n\t     *\n\t     * Asserts that `function` will throw an error that is an instance of\n\t     * `constructor`, or alternately that it will throw an error with message\n\t     * matching `regexp`.\n\t     *\n\t     *     should.throw(fn, 'function throws a reference error');\n\t     *     should.throw(fn, /function throws a reference error/);\n\t     *     should.throw(fn, ReferenceError);\n\t     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n\t     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n\t     *\n\t     * @name throw\n\t     * @alias Throw\n\t     * @param {Function} function\n\t     * @param {ErrorConstructor} constructor\n\t     * @param {RegExp} regexp\n\t     * @param {String} message\n\t     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t     * @namespace Should\n\t     * @api public\n\t     */\n\t\n\t    should.Throw = function (fn, errt, errs, msg) {\n\t      new Assertion(fn, msg).to.Throw(errt, errs);\n\t    };\n\t\n\t    /**\n\t     * ### .exist\n\t     *\n\t     * Asserts that the target is neither `null` nor `undefined`.\n\t     *\n\t     *     var foo = 'hi';\n\t     *\n\t     *     should.exist(foo, 'foo exists');\n\t     *\n\t     * @name exist\n\t     * @namespace Should\n\t     * @api public\n\t     */\n\t\n\t    should.exist = function (val, msg) {\n\t      new Assertion(val, msg).to.exist;\n\t    }\n\t\n\t    // negation\n\t    should.not = {}\n\t\n\t    /**\n\t     * ### .not.equal(actual, expected, [message])\n\t     *\n\t     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n\t     *\n\t     *     should.not.equal(3, 4, 'these numbers are not equal');\n\t     *\n\t     * @name not.equal\n\t     * @param {Mixed} actual\n\t     * @param {Mixed} expected\n\t     * @param {String} message\n\t     * @namespace Should\n\t     * @api public\n\t     */\n\t\n\t    should.not.equal = function (val1, val2, msg) {\n\t      new Assertion(val1, msg).to.not.equal(val2);\n\t    };\n\t\n\t    /**\n\t     * ### .throw(function, [constructor/regexp], [message])\n\t     *\n\t     * Asserts that `function` will _not_ throw an error that is an instance of\n\t     * `constructor`, or alternately that it will not throw an error with message\n\t     * matching `regexp`.\n\t     *\n\t     *     should.not.throw(fn, Error, 'function does not throw');\n\t     *\n\t     * @name not.throw\n\t     * @alias not.Throw\n\t     * @param {Function} function\n\t     * @param {ErrorConstructor} constructor\n\t     * @param {RegExp} regexp\n\t     * @param {String} message\n\t     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t     * @namespace Should\n\t     * @api public\n\t     */\n\t\n\t    should.not.Throw = function (fn, errt, errs, msg) {\n\t      new Assertion(fn, msg).to.not.Throw(errt, errs);\n\t    };\n\t\n\t    /**\n\t     * ### .not.exist\n\t     *\n\t     * Asserts that the target is neither `null` nor `undefined`.\n\t     *\n\t     *     var bar = null;\n\t     *\n\t     *     should.not.exist(bar, 'bar does not exist');\n\t     *\n\t     * @name not.exist\n\t     * @namespace Should\n\t     * @api public\n\t     */\n\t\n\t    should.not.exist = function (val, msg) {\n\t      new Assertion(val, msg).to.not.exist;\n\t    }\n\t\n\t    should['throw'] = should['Throw'];\n\t    should.not['throw'] = should.not['Throw'];\n\t\n\t    return should;\n\t  };\n\t\n\t  chai.should = loadShould;\n\t  chai.Should = loadShould;\n\t};\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * chai\n\t * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n\t * MIT Licensed\n\t */\n\t\n\t\n\tmodule.exports = function (chai, util) {\n\t\n\t  /*!\n\t   * Chai dependencies.\n\t   */\n\t\n\t  var Assertion = chai.Assertion\n\t    , flag = util.flag;\n\t\n\t  /*!\n\t   * Module export.\n\t   */\n\t\n\t  /**\n\t   * ### assert(expression, message)\n\t   *\n\t   * Write your own test expressions.\n\t   *\n\t   *     assert('foo' !== 'bar', 'foo is not bar');\n\t   *     assert(Array.isArray([]), 'empty arrays are arrays');\n\t   *\n\t   * @param {Mixed} expression to test for truthiness\n\t   * @param {String} message to display on error\n\t   * @name assert\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  var assert = chai.assert = function (express, errmsg) {\n\t    var test = new Assertion(null, null, chai.assert);\n\t    test.assert(\n\t        express\n\t      , errmsg\n\t      , '[ negation message unavailable ]'\n\t    );\n\t  };\n\t\n\t  /**\n\t   * ### .fail(actual, expected, [message], [operator])\n\t   *\n\t   * Throw a failure. Node.js `assert` module-compatible.\n\t   *\n\t   * @name fail\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @param {String} operator\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.fail = function (actual, expected, message, operator) {\n\t    message = message || 'assert.fail()';\n\t    throw new chai.AssertionError(message, {\n\t        actual: actual\n\t      , expected: expected\n\t      , operator: operator\n\t    }, assert.fail);\n\t  };\n\t\n\t  /**\n\t   * ### .isOk(object, [message])\n\t   *\n\t   * Asserts that `object` is truthy.\n\t   *\n\t   *     assert.isOk('everything', 'everything is ok');\n\t   *     assert.isOk(false, 'this will fail');\n\t   *\n\t   * @name isOk\n\t   * @alias ok\n\t   * @param {Mixed} object to test\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isOk = function (val, msg) {\n\t    new Assertion(val, msg).is.ok;\n\t  };\n\t\n\t  /**\n\t   * ### .isNotOk(object, [message])\n\t   *\n\t   * Asserts that `object` is falsy.\n\t   *\n\t   *     assert.isNotOk('everything', 'this will fail');\n\t   *     assert.isNotOk(false, 'this will pass');\n\t   *\n\t   * @name isNotOk\n\t   * @alias notOk\n\t   * @param {Mixed} object to test\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotOk = function (val, msg) {\n\t    new Assertion(val, msg).is.not.ok;\n\t  };\n\t\n\t  /**\n\t   * ### .equal(actual, expected, [message])\n\t   *\n\t   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n\t   *\n\t   *     assert.equal(3, '3', '== coerces values to strings');\n\t   *\n\t   * @name equal\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.equal = function (act, exp, msg) {\n\t    var test = new Assertion(act, msg, assert.equal);\n\t\n\t    test.assert(\n\t        exp == flag(test, 'object')\n\t      , 'expected #{this} to equal #{exp}'\n\t      , 'expected #{this} to not equal #{act}'\n\t      , exp\n\t      , act\n\t    );\n\t  };\n\t\n\t  /**\n\t   * ### .notEqual(actual, expected, [message])\n\t   *\n\t   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n\t   *\n\t   *     assert.notEqual(3, 4, 'these numbers are not equal');\n\t   *\n\t   * @name notEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notEqual = function (act, exp, msg) {\n\t    var test = new Assertion(act, msg, assert.notEqual);\n\t\n\t    test.assert(\n\t        exp != flag(test, 'object')\n\t      , 'expected #{this} to not equal #{exp}'\n\t      , 'expected #{this} to equal #{act}'\n\t      , exp\n\t      , act\n\t    );\n\t  };\n\t\n\t  /**\n\t   * ### .strictEqual(actual, expected, [message])\n\t   *\n\t   * Asserts strict equality (`===`) of `actual` and `expected`.\n\t   *\n\t   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n\t   *\n\t   * @name strictEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.strictEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.equal(exp);\n\t  };\n\t\n\t  /**\n\t   * ### .notStrictEqual(actual, expected, [message])\n\t   *\n\t   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n\t   *\n\t   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n\t   *\n\t   * @name notStrictEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notStrictEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.not.equal(exp);\n\t  };\n\t\n\t  /**\n\t   * ### .deepEqual(actual, expected, [message])\n\t   *\n\t   * Asserts that `actual` is deeply equal to `expected`.\n\t   *\n\t   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n\t   *\n\t   * @name deepEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.deepEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.eql(exp);\n\t  };\n\t\n\t  /**\n\t   * ### .notDeepEqual(actual, expected, [message])\n\t   *\n\t   * Assert that `actual` is not deeply equal to `expected`.\n\t   *\n\t   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n\t   *\n\t   * @name notDeepEqual\n\t   * @param {Mixed} actual\n\t   * @param {Mixed} expected\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notDeepEqual = function (act, exp, msg) {\n\t    new Assertion(act, msg).to.not.eql(exp);\n\t  };\n\t\n\t   /**\n\t   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n\t   *\n\t   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n\t   *\n\t   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n\t   *\n\t   * @name isAbove\n\t   * @param {Mixed} valueToCheck\n\t   * @param {Mixed} valueToBeAbove\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isAbove = function (val, abv, msg) {\n\t    new Assertion(val, msg).to.be.above(abv);\n\t  };\n\t\n\t   /**\n\t   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n\t   *\n\t   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n\t   *\n\t   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n\t   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n\t   *\n\t   * @name isAtLeast\n\t   * @param {Mixed} valueToCheck\n\t   * @param {Mixed} valueToBeAtLeast\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isAtLeast = function (val, atlst, msg) {\n\t    new Assertion(val, msg).to.be.least(atlst);\n\t  };\n\t\n\t   /**\n\t   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n\t   *\n\t   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n\t   *\n\t   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n\t   *\n\t   * @name isBelow\n\t   * @param {Mixed} valueToCheck\n\t   * @param {Mixed} valueToBeBelow\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isBelow = function (val, blw, msg) {\n\t    new Assertion(val, msg).to.be.below(blw);\n\t  };\n\t\n\t   /**\n\t   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n\t   *\n\t   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n\t   *\n\t   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n\t   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n\t   *\n\t   * @name isAtMost\n\t   * @param {Mixed} valueToCheck\n\t   * @param {Mixed} valueToBeAtMost\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isAtMost = function (val, atmst, msg) {\n\t    new Assertion(val, msg).to.be.most(atmst);\n\t  };\n\t\n\t  /**\n\t   * ### .isTrue(value, [message])\n\t   *\n\t   * Asserts that `value` is true.\n\t   *\n\t   *     var teaServed = true;\n\t   *     assert.isTrue(teaServed, 'the tea has been served');\n\t   *\n\t   * @name isTrue\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isTrue = function (val, msg) {\n\t    new Assertion(val, msg).is['true'];\n\t  };\n\t\n\t  /**\n\t   * ### .isNotTrue(value, [message])\n\t   *\n\t   * Asserts that `value` is not true.\n\t   *\n\t   *     var tea = 'tasty chai';\n\t   *     assert.isNotTrue(tea, 'great, time for tea!');\n\t   *\n\t   * @name isNotTrue\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotTrue = function (val, msg) {\n\t    new Assertion(val, msg).to.not.equal(true);\n\t  };\n\t\n\t  /**\n\t   * ### .isFalse(value, [message])\n\t   *\n\t   * Asserts that `value` is false.\n\t   *\n\t   *     var teaServed = false;\n\t   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n\t   *\n\t   * @name isFalse\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isFalse = function (val, msg) {\n\t    new Assertion(val, msg).is['false'];\n\t  };\n\t\n\t  /**\n\t   * ### .isNotFalse(value, [message])\n\t   *\n\t   * Asserts that `value` is not false.\n\t   *\n\t   *     var tea = 'tasty chai';\n\t   *     assert.isNotFalse(tea, 'great, time for tea!');\n\t   *\n\t   * @name isNotFalse\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotFalse = function (val, msg) {\n\t    new Assertion(val, msg).to.not.equal(false);\n\t  };\n\t\n\t  /**\n\t   * ### .isNull(value, [message])\n\t   *\n\t   * Asserts that `value` is null.\n\t   *\n\t   *     assert.isNull(err, 'there was no error');\n\t   *\n\t   * @name isNull\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNull = function (val, msg) {\n\t    new Assertion(val, msg).to.equal(null);\n\t  };\n\t\n\t  /**\n\t   * ### .isNotNull(value, [message])\n\t   *\n\t   * Asserts that `value` is not null.\n\t   *\n\t   *     var tea = 'tasty chai';\n\t   *     assert.isNotNull(tea, 'great, time for tea!');\n\t   *\n\t   * @name isNotNull\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotNull = function (val, msg) {\n\t    new Assertion(val, msg).to.not.equal(null);\n\t  };\n\t\n\t  /**\n\t   * ### .isNaN\n\t   * Asserts that value is NaN\n\t   *\n\t   *    assert.isNaN('foo', 'foo is NaN');\n\t   *\n\t   * @name isNaN\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNaN = function (val, msg) {\n\t    new Assertion(val, msg).to.be.NaN;\n\t  };\n\t\n\t  /**\n\t   * ### .isNotNaN\n\t   * Asserts that value is not NaN\n\t   *\n\t   *    assert.isNotNaN(4, '4 is not NaN');\n\t   *\n\t   * @name isNotNaN\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t  assert.isNotNaN = function (val, msg) {\n\t    new Assertion(val, msg).not.to.be.NaN;\n\t  };\n\t\n\t  /**\n\t   * ### .isUndefined(value, [message])\n\t   *\n\t   * Asserts that `value` is `undefined`.\n\t   *\n\t   *     var tea;\n\t   *     assert.isUndefined(tea, 'no tea defined');\n\t   *\n\t   * @name isUndefined\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isUndefined = function (val, msg) {\n\t    new Assertion(val, msg).to.equal(undefined);\n\t  };\n\t\n\t  /**\n\t   * ### .isDefined(value, [message])\n\t   *\n\t   * Asserts that `value` is not `undefined`.\n\t   *\n\t   *     var tea = 'cup of chai';\n\t   *     assert.isDefined(tea, 'tea has been defined');\n\t   *\n\t   * @name isDefined\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isDefined = function (val, msg) {\n\t    new Assertion(val, msg).to.not.equal(undefined);\n\t  };\n\t\n\t  /**\n\t   * ### .isFunction(value, [message])\n\t   *\n\t   * Asserts that `value` is a function.\n\t   *\n\t   *     function serveTea() { return 'cup of tea'; };\n\t   *     assert.isFunction(serveTea, 'great, we can have tea now');\n\t   *\n\t   * @name isFunction\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isFunction = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('function');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotFunction(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a function.\n\t   *\n\t   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n\t   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n\t   *\n\t   * @name isNotFunction\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotFunction = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('function');\n\t  };\n\t\n\t  /**\n\t   * ### .isObject(value, [message])\n\t   *\n\t   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n\t   * _The assertion does not match subclassed objects._\n\t   *\n\t   *     var selection = { name: 'Chai', serve: 'with spices' };\n\t   *     assert.isObject(selection, 'tea selection is an object');\n\t   *\n\t   * @name isObject\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isObject = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('object');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotObject(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n\t   *\n\t   *     var selection = 'chai'\n\t   *     assert.isNotObject(selection, 'tea selection is not an object');\n\t   *     assert.isNotObject(null, 'null is not an object');\n\t   *\n\t   * @name isNotObject\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotObject = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('object');\n\t  };\n\t\n\t  /**\n\t   * ### .isArray(value, [message])\n\t   *\n\t   * Asserts that `value` is an array.\n\t   *\n\t   *     var menu = [ 'green', 'chai', 'oolong' ];\n\t   *     assert.isArray(menu, 'what kind of tea do we want?');\n\t   *\n\t   * @name isArray\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isArray = function (val, msg) {\n\t    new Assertion(val, msg).to.be.an('array');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotArray(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ an array.\n\t   *\n\t   *     var menu = 'green|chai|oolong';\n\t   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n\t   *\n\t   * @name isNotArray\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotArray = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.an('array');\n\t  };\n\t\n\t  /**\n\t   * ### .isString(value, [message])\n\t   *\n\t   * Asserts that `value` is a string.\n\t   *\n\t   *     var teaOrder = 'chai';\n\t   *     assert.isString(teaOrder, 'order placed');\n\t   *\n\t   * @name isString\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isString = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('string');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotString(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a string.\n\t   *\n\t   *     var teaOrder = 4;\n\t   *     assert.isNotString(teaOrder, 'order placed');\n\t   *\n\t   * @name isNotString\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotString = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('string');\n\t  };\n\t\n\t  /**\n\t   * ### .isNumber(value, [message])\n\t   *\n\t   * Asserts that `value` is a number.\n\t   *\n\t   *     var cups = 2;\n\t   *     assert.isNumber(cups, 'how many cups');\n\t   *\n\t   * @name isNumber\n\t   * @param {Number} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNumber = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('number');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotNumber(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a number.\n\t   *\n\t   *     var cups = '2 cups please';\n\t   *     assert.isNotNumber(cups, 'how many cups');\n\t   *\n\t   * @name isNotNumber\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotNumber = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('number');\n\t  };\n\t\n\t  /**\n\t   * ### .isBoolean(value, [message])\n\t   *\n\t   * Asserts that `value` is a boolean.\n\t   *\n\t   *     var teaReady = true\n\t   *       , teaServed = false;\n\t   *\n\t   *     assert.isBoolean(teaReady, 'is the tea ready');\n\t   *     assert.isBoolean(teaServed, 'has tea been served');\n\t   *\n\t   * @name isBoolean\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isBoolean = function (val, msg) {\n\t    new Assertion(val, msg).to.be.a('boolean');\n\t  };\n\t\n\t  /**\n\t   * ### .isNotBoolean(value, [message])\n\t   *\n\t   * Asserts that `value` is _not_ a boolean.\n\t   *\n\t   *     var teaReady = 'yep'\n\t   *       , teaServed = 'nope';\n\t   *\n\t   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n\t   *     assert.isNotBoolean(teaServed, 'has tea been served');\n\t   *\n\t   * @name isNotBoolean\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotBoolean = function (val, msg) {\n\t    new Assertion(val, msg).to.not.be.a('boolean');\n\t  };\n\t\n\t  /**\n\t   * ### .typeOf(value, name, [message])\n\t   *\n\t   * Asserts that `value`'s type is `name`, as determined by\n\t   * `Object.prototype.toString`.\n\t   *\n\t   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n\t   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n\t   *     assert.typeOf('tea', 'string', 'we have a string');\n\t   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n\t   *     assert.typeOf(null, 'null', 'we have a null');\n\t   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n\t   *\n\t   * @name typeOf\n\t   * @param {Mixed} value\n\t   * @param {String} name\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.typeOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.be.a(type);\n\t  };\n\t\n\t  /**\n\t   * ### .notTypeOf(value, name, [message])\n\t   *\n\t   * Asserts that `value`'s type is _not_ `name`, as determined by\n\t   * `Object.prototype.toString`.\n\t   *\n\t   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n\t   *\n\t   * @name notTypeOf\n\t   * @param {Mixed} value\n\t   * @param {String} typeof name\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notTypeOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.not.be.a(type);\n\t  };\n\t\n\t  /**\n\t   * ### .instanceOf(object, constructor, [message])\n\t   *\n\t   * Asserts that `value` is an instance of `constructor`.\n\t   *\n\t   *     var Tea = function (name) { this.name = name; }\n\t   *       , chai = new Tea('chai');\n\t   *\n\t   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n\t   *\n\t   * @name instanceOf\n\t   * @param {Object} object\n\t   * @param {Constructor} constructor\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.instanceOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.be.instanceOf(type);\n\t  };\n\t\n\t  /**\n\t   * ### .notInstanceOf(object, constructor, [message])\n\t   *\n\t   * Asserts `value` is not an instance of `constructor`.\n\t   *\n\t   *     var Tea = function (name) { this.name = name; }\n\t   *       , chai = new String('chai');\n\t   *\n\t   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n\t   *\n\t   * @name notInstanceOf\n\t   * @param {Object} object\n\t   * @param {Constructor} constructor\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notInstanceOf = function (val, type, msg) {\n\t    new Assertion(val, msg).to.not.be.instanceOf(type);\n\t  };\n\t\n\t  /**\n\t   * ### .include(haystack, needle, [message])\n\t   *\n\t   * Asserts that `haystack` includes `needle`. Works\n\t   * for strings and arrays.\n\t   *\n\t   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n\t   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n\t   *\n\t   * @name include\n\t   * @param {Array|String} haystack\n\t   * @param {Mixed} needle\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.include = function (exp, inc, msg) {\n\t    new Assertion(exp, msg, assert.include).include(inc);\n\t  };\n\t\n\t  /**\n\t   * ### .notInclude(haystack, needle, [message])\n\t   *\n\t   * Asserts that `haystack` does not include `needle`. Works\n\t   * for strings and arrays.\n\t   *\n\t   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n\t   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n\t   *\n\t   * @name notInclude\n\t   * @param {Array|String} haystack\n\t   * @param {Mixed} needle\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notInclude = function (exp, inc, msg) {\n\t    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n\t  };\n\t\n\t  /**\n\t   * ### .match(value, regexp, [message])\n\t   *\n\t   * Asserts that `value` matches the regular expression `regexp`.\n\t   *\n\t   *     assert.match('foobar', /^foo/, 'regexp matches');\n\t   *\n\t   * @name match\n\t   * @param {Mixed} value\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.match = function (exp, re, msg) {\n\t    new Assertion(exp, msg).to.match(re);\n\t  };\n\t\n\t  /**\n\t   * ### .notMatch(value, regexp, [message])\n\t   *\n\t   * Asserts that `value` does not match the regular expression `regexp`.\n\t   *\n\t   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n\t   *\n\t   * @name notMatch\n\t   * @param {Mixed} value\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notMatch = function (exp, re, msg) {\n\t    new Assertion(exp, msg).to.not.match(re);\n\t  };\n\t\n\t  /**\n\t   * ### .property(object, property, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`.\n\t   *\n\t   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n\t   *\n\t   * @name property\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.property = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.have.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .notProperty(object, property, [message])\n\t   *\n\t   * Asserts that `object` does _not_ have a property named by `property`.\n\t   *\n\t   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n\t   *\n\t   * @name notProperty\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notProperty = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.not.have.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .deepProperty(object, property, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`, which can be a\n\t   * string using dot- and bracket-notation for deep reference.\n\t   *\n\t   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n\t   *\n\t   * @name deepProperty\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.deepProperty = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.have.deep.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .notDeepProperty(object, property, [message])\n\t   *\n\t   * Asserts that `object` does _not_ have a property named by `property`, which\n\t   * can be a string using dot- and bracket-notation for deep reference.\n\t   *\n\t   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n\t   *\n\t   * @name notDeepProperty\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.notDeepProperty = function (obj, prop, msg) {\n\t    new Assertion(obj, msg).to.not.have.deep.property(prop);\n\t  };\n\t\n\t  /**\n\t   * ### .propertyVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property` with value given\n\t   * by `value`.\n\t   *\n\t   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n\t   *\n\t   * @name propertyVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.propertyVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.have.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .propertyNotVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`, but with a value\n\t   * different from that given by `value`.\n\t   *\n\t   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n\t   *\n\t   * @name propertyNotVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.propertyNotVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.not.have.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .deepPropertyVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property` with value given\n\t   * by `value`. `property` can use dot- and bracket-notation for deep\n\t   * reference.\n\t   *\n\t   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n\t   *\n\t   * @name deepPropertyVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.deepPropertyVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.have.deep.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .deepPropertyNotVal(object, property, value, [message])\n\t   *\n\t   * Asserts that `object` has a property named by `property`, but with a value\n\t   * different from that given by `value`. `property` can use dot- and\n\t   * bracket-notation for deep reference.\n\t   *\n\t   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n\t   *\n\t   * @name deepPropertyNotVal\n\t   * @param {Object} object\n\t   * @param {String} property\n\t   * @param {Mixed} value\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n\t    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n\t  };\n\t\n\t  /**\n\t   * ### .lengthOf(object, length, [message])\n\t   *\n\t   * Asserts that `object` has a `length` property with the expected value.\n\t   *\n\t   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n\t   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n\t   *\n\t   * @name lengthOf\n\t   * @param {Mixed} object\n\t   * @param {Number} length\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.lengthOf = function (exp, len, msg) {\n\t    new Assertion(exp, msg).to.have.length(len);\n\t  };\n\t\n\t  /**\n\t   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n\t   *\n\t   * Asserts that `function` will throw an error that is an instance of\n\t   * `constructor`, or alternately that it will throw an error with message\n\t   * matching `regexp`.\n\t   *\n\t   *     assert.throws(fn, 'function throws a reference error');\n\t   *     assert.throws(fn, /function throws a reference error/);\n\t   *     assert.throws(fn, ReferenceError);\n\t   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n\t   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n\t   *\n\t   * @name throws\n\t   * @alias throw\n\t   * @alias Throw\n\t   * @param {Function} function\n\t   * @param {ErrorConstructor} constructor\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.throws = function (fn, errt, errs, msg) {\n\t    if ('string' === typeof errt || errt instanceof RegExp) {\n\t      errs = errt;\n\t      errt = null;\n\t    }\n\t\n\t    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n\t    return flag(assertErr, 'object');\n\t  };\n\t\n\t  /**\n\t   * ### .doesNotThrow(function, [constructor/regexp], [message])\n\t   *\n\t   * Asserts that `function` will _not_ throw an error that is an instance of\n\t   * `constructor`, or alternately that it will not throw an error with message\n\t   * matching `regexp`.\n\t   *\n\t   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n\t   *\n\t   * @name doesNotThrow\n\t   * @param {Function} function\n\t   * @param {ErrorConstructor} constructor\n\t   * @param {RegExp} regexp\n\t   * @param {String} message\n\t   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.doesNotThrow = function (fn, type, msg) {\n\t    if ('string' === typeof type) {\n\t      msg = type;\n\t      type = null;\n\t    }\n\t\n\t    new Assertion(fn, msg).to.not.Throw(type);\n\t  };\n\t\n\t  /**\n\t   * ### .operator(val1, operator, val2, [message])\n\t   *\n\t   * Compares two values using `operator`.\n\t   *\n\t   *     assert.operator(1, '<', 2, 'everything is ok');\n\t   *     assert.operator(1, '>', 2, 'this will fail');\n\t   *\n\t   * @name operator\n\t   * @param {Mixed} val1\n\t   * @param {String} operator\n\t   * @param {Mixed} val2\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.operator = function (val, operator, val2, msg) {\n\t    var ok;\n\t    switch(operator) {\n\t      case '==':\n\t        ok = val == val2;\n\t        break;\n\t      case '===':\n\t        ok = val === val2;\n\t        break;\n\t      case '>':\n\t        ok = val > val2;\n\t        break;\n\t      case '>=':\n\t        ok = val >= val2;\n\t        break;\n\t      case '<':\n\t        ok = val < val2;\n\t        break;\n\t      case '<=':\n\t        ok = val <= val2;\n\t        break;\n\t      case '!=':\n\t        ok = val != val2;\n\t        break;\n\t      case '!==':\n\t        ok = val !== val2;\n\t        break;\n\t      default:\n\t        throw new Error('Invalid operator \"' + operator + '\"');\n\t    }\n\t    var test = new Assertion(ok, msg);\n\t    test.assert(\n\t        true === flag(test, 'object')\n\t      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n\t      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n\t  };\n\t\n\t  /**\n\t   * ### .closeTo(actual, expected, delta, [message])\n\t   *\n\t   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n\t   *\n\t   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n\t   *\n\t   * @name closeTo\n\t   * @param {Number} actual\n\t   * @param {Number} expected\n\t   * @param {Number} delta\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.closeTo = function (act, exp, delta, msg) {\n\t    new Assertion(act, msg).to.be.closeTo(exp, delta);\n\t  };\n\t\n\t  /**\n\t   * ### .approximately(actual, expected, delta, [message])\n\t   *\n\t   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n\t   *\n\t   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n\t   *\n\t   * @name approximately\n\t   * @param {Number} actual\n\t   * @param {Number} expected\n\t   * @param {Number} delta\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.approximately = function (act, exp, delta, msg) {\n\t    new Assertion(act, msg).to.be.approximately(exp, delta);\n\t  };\n\t\n\t  /**\n\t   * ### .sameMembers(set1, set2, [message])\n\t   *\n\t   * Asserts that `set1` and `set2` have the same members.\n\t   * Order is not taken into account.\n\t   *\n\t   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n\t   *\n\t   * @name sameMembers\n\t   * @param {Array} set1\n\t   * @param {Array} set2\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.sameMembers = function (set1, set2, msg) {\n\t    new Assertion(set1, msg).to.have.same.members(set2);\n\t  }\n\t\n\t  /**\n\t   * ### .sameDeepMembers(set1, set2, [message])\n\t   *\n\t   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n\t   * Order is not taken into account.\n\t   *\n\t   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n\t   *\n\t   * @name sameDeepMembers\n\t   * @param {Array} set1\n\t   * @param {Array} set2\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.sameDeepMembers = function (set1, set2, msg) {\n\t    new Assertion(set1, msg).to.have.same.deep.members(set2);\n\t  }\n\t\n\t  /**\n\t   * ### .includeMembers(superset, subset, [message])\n\t   *\n\t   * Asserts that `subset` is included in `superset`.\n\t   * Order is not taken into account.\n\t   *\n\t   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n\t   *\n\t   * @name includeMembers\n\t   * @param {Array} superset\n\t   * @param {Array} subset\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.includeMembers = function (superset, subset, msg) {\n\t    new Assertion(superset, msg).to.include.members(subset);\n\t  }\n\t\n\t  /**\n\t   * ### .includeDeepMembers(superset, subset, [message])\n\t   *\n\t   * Asserts that `subset` is included in `superset` - using deep equality checking.\n\t   * Order is not taken into account.\n\t   * Duplicates are ignored.\n\t   *\n\t   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n\t   *\n\t   * @name includeDeepMembers\n\t   * @param {Array} superset\n\t   * @param {Array} subset\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.includeDeepMembers = function (superset, subset, msg) {\n\t    new Assertion(superset, msg).to.include.deep.members(subset);\n\t  }\n\t\n\t  /**\n\t   * ### .oneOf(inList, list, [message])\n\t   *\n\t   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n\t   *\n\t   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n\t   *\n\t   * @name oneOf\n\t   * @param {*} inList\n\t   * @param {Array<*>} list\n\t   * @param {String} message\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.oneOf = function (inList, list, msg) {\n\t    new Assertion(inList, msg).to.be.oneOf(list);\n\t  }\n\t\n\t   /**\n\t   * ### .changes(function, object, property)\n\t   *\n\t   * Asserts that a function changes the value of a property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val = 22 };\n\t   *     assert.changes(fn, obj, 'val');\n\t   *\n\t   * @name changes\n\t   * @param {Function} modifier function\n\t   * @param {Object} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.changes = function (fn, obj, prop) {\n\t    new Assertion(fn).to.change(obj, prop);\n\t  }\n\t\n\t   /**\n\t   * ### .doesNotChange(function, object, property)\n\t   *\n\t   * Asserts that a function does not changes the value of a property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { console.log('foo'); };\n\t   *     assert.doesNotChange(fn, obj, 'val');\n\t   *\n\t   * @name doesNotChange\n\t   * @param {Function} modifier function\n\t   * @param {Object} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.doesNotChange = function (fn, obj, prop) {\n\t    new Assertion(fn).to.not.change(obj, prop);\n\t  }\n\t\n\t   /**\n\t   * ### .increases(function, object, property)\n\t   *\n\t   * Asserts that a function increases an object property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val = 13 };\n\t   *     assert.increases(fn, obj, 'val');\n\t   *\n\t   * @name increases\n\t   * @param {Function} modifier function\n\t   * @param {Object} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.increases = function (fn, obj, prop) {\n\t    new Assertion(fn).to.increase(obj, prop);\n\t  }\n\t\n\t   /**\n\t   * ### .doesNotIncrease(function, object, property)\n\t   *\n\t   * Asserts that a function does not increase object property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val = 8 };\n\t   *     assert.doesNotIncrease(fn, obj, 'val');\n\t   *\n\t   * @name doesNotIncrease\n\t   * @param {Function} modifier function\n\t   * @param {Object} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.doesNotIncrease = function (fn, obj, prop) {\n\t    new Assertion(fn).to.not.increase(obj, prop);\n\t  }\n\t\n\t   /**\n\t   * ### .decreases(function, object, property)\n\t   *\n\t   * Asserts that a function decreases an object property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val = 5 };\n\t   *     assert.decreases(fn, obj, 'val');\n\t   *\n\t   * @name decreases\n\t   * @param {Function} modifier function\n\t   * @param {Object} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.decreases = function (fn, obj, prop) {\n\t    new Assertion(fn).to.decrease(obj, prop);\n\t  }\n\t\n\t   /**\n\t   * ### .doesNotDecrease(function, object, property)\n\t   *\n\t   * Asserts that a function does not decreases an object property\n\t   *\n\t   *     var obj = { val: 10 };\n\t   *     var fn = function() { obj.val = 15 };\n\t   *     assert.doesNotDecrease(fn, obj, 'val');\n\t   *\n\t   * @name doesNotDecrease\n\t   * @param {Function} modifier function\n\t   * @param {Object} object\n\t   * @param {String} property name\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.doesNotDecrease = function (fn, obj, prop) {\n\t    new Assertion(fn).to.not.decrease(obj, prop);\n\t  }\n\t\n\t  /*!\n\t   * ### .ifError(object)\n\t   *\n\t   * Asserts if value is not a false value, and throws if it is a true value.\n\t   * This is added to allow for chai to be a drop-in replacement for Node's\n\t   * assert class.\n\t   *\n\t   *     var err = new Error('I am a custom error');\n\t   *     assert.ifError(err); // Rethrows err!\n\t   *\n\t   * @name ifError\n\t   * @param {Object} object\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.ifError = function (val) {\n\t    if (val) {\n\t      throw(val);\n\t    }\n\t  };\n\t\n\t  /**\n\t   * ### .isExtensible(object)\n\t   *\n\t   * Asserts that `object` is extensible (can have new properties added to it).\n\t   *\n\t   *     assert.isExtensible({});\n\t   *\n\t   * @name isExtensible\n\t   * @alias extensible\n\t   * @param {Object} object\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isExtensible = function (obj, msg) {\n\t    new Assertion(obj, msg).to.be.extensible;\n\t  };\n\t\n\t  /**\n\t   * ### .isNotExtensible(object)\n\t   *\n\t   * Asserts that `object` is _not_ extensible.\n\t   *\n\t   *     var nonExtensibleObject = Object.preventExtensions({});\n\t   *     var sealedObject = Object.seal({});\n\t   *     var frozenObject = Object.freese({});\n\t   *\n\t   *     assert.isNotExtensible(nonExtensibleObject);\n\t   *     assert.isNotExtensible(sealedObject);\n\t   *     assert.isNotExtensible(frozenObject);\n\t   *\n\t   * @name isNotExtensible\n\t   * @alias notExtensible\n\t   * @param {Object} object\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotExtensible = function (obj, msg) {\n\t    new Assertion(obj, msg).to.not.be.extensible;\n\t  };\n\t\n\t  /**\n\t   * ### .isSealed(object)\n\t   *\n\t   * Asserts that `object` is sealed (cannot have new properties added to it\n\t   * and its existing properties cannot be removed).\n\t   *\n\t   *     var sealedObject = Object.seal({});\n\t   *     var frozenObject = Object.seal({});\n\t   *\n\t   *     assert.isSealed(sealedObject);\n\t   *     assert.isSealed(frozenObject);\n\t   *\n\t   * @name isSealed\n\t   * @alias sealed\n\t   * @param {Object} object\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isSealed = function (obj, msg) {\n\t    new Assertion(obj, msg).to.be.sealed;\n\t  };\n\t\n\t  /**\n\t   * ### .isNotSealed(object)\n\t   *\n\t   * Asserts that `object` is _not_ sealed.\n\t   *\n\t   *     assert.isNotSealed({});\n\t   *\n\t   * @name isNotSealed\n\t   * @alias notSealed\n\t   * @param {Object} object\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotSealed = function (obj, msg) {\n\t    new Assertion(obj, msg).to.not.be.sealed;\n\t  };\n\t\n\t  /**\n\t   * ### .isFrozen(object)\n\t   *\n\t   * Asserts that `object` is frozen (cannot have new properties added to it\n\t   * and its existing properties cannot be modified).\n\t   *\n\t   *     var frozenObject = Object.freeze({});\n\t   *     assert.frozen(frozenObject);\n\t   *\n\t   * @name isFrozen\n\t   * @alias frozen\n\t   * @param {Object} object\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isFrozen = function (obj, msg) {\n\t    new Assertion(obj, msg).to.be.frozen;\n\t  };\n\t\n\t  /**\n\t   * ### .isNotFrozen(object)\n\t   *\n\t   * Asserts that `object` is _not_ frozen.\n\t   *\n\t   *     assert.isNotFrozen({});\n\t   *\n\t   * @name isNotFrozen\n\t   * @alias notFrozen\n\t   * @param {Object} object\n\t   * @param {String} message _optional_\n\t   * @namespace Assert\n\t   * @api public\n\t   */\n\t\n\t  assert.isNotFrozen = function (obj, msg) {\n\t    new Assertion(obj, msg).to.not.be.frozen;\n\t  };\n\t\n\t  /*!\n\t   * Aliases.\n\t   */\n\t\n\t  (function alias(name, as){\n\t    assert[as] = assert[name];\n\t    return alias;\n\t  })\n\t  ('isOk', 'ok')\n\t  ('isNotOk', 'notOk')\n\t  ('throws', 'throw')\n\t  ('throws', 'Throw')\n\t  ('isExtensible', 'extensible')\n\t  ('isNotExtensible', 'notExtensible')\n\t  ('isSealed', 'sealed')\n\t  ('isNotSealed', 'notSealed')\n\t  ('isFrozen', 'frozen')\n\t  ('isNotFrozen', 'notFrozen');\n\t};\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** background.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4703ccab8254dc353d85\n **/","BackTransport = require './back-transport.coffee'\r\ndo ({expect, assert} = chai = require \"chai\").should\r\n\r\nclass BackSkeleton\r\n  constructor: ->\r\n    @transport = new BackTransport @\r\n \r\n  receive: (port,name,message) ->\r\n    console.log \"!name: #{name}  \\n!message: #{message}\"\r\n    @send port,\"msg\",\"Done!\"\r\n\r\n  send: (port,name,message) ->\r\n    @transport.send port,name,message\r\n\r\nbackSkeleton = new BackSkeleton\n\n\n/** WEBPACK FOOTER **\n ** ./~/coffeelint-loader!./src/back/background.coffee\n **/","do ({expect, assert} = chai = require \"chai\").should\r\n\r\n\r\nclass BackTransport\r\n  constructor: (@callbackObject) ->\r\n    expect(@callbackObject).to.exist\r\n\r\n    chrome.runtime.onConnect.addListener (port) =>\r\n      # portname == 'skeleton' ?\r\n      port.onMessage.addListener (message) =>\r\n        @callbackObject.receive port, message.name, message.message\r\n\r\n  send: (port, name, message) ->\r\n    port.postMessage ({\r\n      name: name\r\n      message: message\r\n    })\r\n\r\n      \r\nmodule.exports = BackTransport\n\n\n/** WEBPACK FOOTER **\n ** ./~/coffeelint-loader!./src/back/back-transport.coffee\n **/","module.exports = require('./lib/chai');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/index.js\n ** module id = 2\n ** module chunks = 0\n **/","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = []\n  , exports = module.exports = {};\n\n/*!\n * Chai version\n */\n\nexports.version = '3.5.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai.js\n ** module id = 3\n ** module chunks = 0\n **/","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/~/assertion-error/index.js\n ** module id = 4\n ** module chunks = 0\n **/","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Main exports\n */\n\nvar exports = module.exports = {};\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path value\n */\n\nexports.getPathValue = require('./getPathValue');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = require('./getPathInfo');\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = require('./hasProperty');\n\n/*!\n * Function name\n */\n\nexports.getName = require('./getName');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/index.js\n ** module id = 5\n ** module chunks = 0\n **/","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/test.js\n ** module id = 6\n ** module chunks = 0\n **/","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/flag.js\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = require('./lib/type');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/~/type-detect/index.js\n ** module id = 8\n ** module chunks = 0\n **/","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nvar objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/~/type-detect/lib/type.js\n ** module id = 9\n ** module chunks = 0\n **/","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/expectTypes.js\n ** module id = 10\n ** module chunks = 0\n **/","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/getMessage.js\n ** module id = 11\n ** module chunks = 0\n **/","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/getActual.js\n ** module id = 12\n ** module chunks = 0\n **/","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/inspect.js\n ** module id = 13\n ** module chunks = 0\n **/","/*!\n * Chai - getName utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * # getName(func)\n *\n * Gets the name of a function, in a cross-browser way.\n *\n * @param {Function} a function (usually a constructor)\n * @namespace Utils\n * @name getName\n */\n\nmodule.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/getName.js\n ** module id = 14\n ** module chunks = 0\n **/","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/getProperties.js\n ** module id = 15\n ** module chunks = 0\n **/","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/getEnumerableProperties.js\n ** module id = 16\n ** module chunks = 0\n **/","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/objDisplay.js\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n   includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/config.js\n ** module id = 18\n ** module chunks = 0\n **/","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/transferFlags.js\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = require('./lib/eql');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/~/deep-eql/index.js\n ** module id = 20\n ** module chunks = 0\n **/","/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}\n\n/*!\n * Recursively check the equality of two objects.\n * Once basic sameness has been established it will\n * defer to `deepEqual` for each enumerable key\n * in the object.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/~/deep-eql/lib/eql.js\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = require('./lib/type');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/~/deep-eql/~/type-detect/index.js\n ** module id = 22\n ** module chunks = 0\n **/","/*!\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Primary Exports\n */\n\nvar exports = module.exports = getType;\n\n/*!\n * Detectable javascript natives\n */\n\nvar natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};\n\n/**\n * ### typeOf (obj)\n *\n * Use several different techniques to determine\n * the type of object being tested.\n *\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\n\nfunction getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;\n\n/**\n * ### Library\n *\n * Create a repository for custom type detection.\n *\n * ```js\n * var lib = new type.Library;\n * ```\n *\n */\n\nfunction Library () {\n  this.tests = {};\n}\n\n/**\n * #### .of (obj)\n *\n * Expose replacement `typeof` detection to the library.\n *\n * ```js\n * if ('string' === lib.of('hello world')) {\n *   // ...\n * }\n * ```\n *\n * @param {Mixed} object to test\n * @return {String} type\n */\n\nLibrary.prototype.of = getType;\n\n/**\n * #### .define (type, test)\n *\n * Add a test to for the `.test()` assertion.\n *\n * Can be defined as a regular expression:\n *\n * ```js\n * lib.define('int', /^[0-9]+$/);\n * ```\n *\n * ... or as a function:\n *\n * ```js\n * lib.define('bln', function (obj) {\n *   if ('boolean' === lib.of(obj)) return true;\n *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];\n *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();\n *   return !! ~blns.indexOf(obj);\n * });\n * ```\n *\n * @param {String} type\n * @param {RegExp|Function} test\n * @api public\n */\n\nLibrary.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};\n\n/**\n * #### .test (obj, test)\n *\n * Assert that an object is of type. Will first\n * check natives, and if that does not pass it will\n * use the user defined custom tests.\n *\n * ```js\n * assert(lib.test('1', 'int'));\n * assert(lib.test('yes', 'bln'));\n * ```\n *\n * @param {Mixed} object\n * @param {String} type\n * @return {Boolean} result\n * @api public\n */\n\nLibrary.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/~/deep-eql/~/type-detect/lib/type.js\n ** module id = 23\n ** module chunks = 0\n **/","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n *     on objects.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  function Bar () {}\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    arr.constructor = Bar\n    return arr.foo() === 42 && // typed array instances can be augmented\n        arr.constructor === Bar && // constructor can be set\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    array.byteLength\n    that = Buffer._augment(new Uint8Array(array))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` is deprecated\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` is deprecated\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/index.js\n ** module id = 24\n ** module chunks = 0\n **/","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js\n ** module id = 25\n ** module chunks = 0\n **/","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js\n ** module id = 26\n ** module chunks = 0\n **/","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/isarray/index.js\n ** module id = 27\n ** module chunks = 0\n **/","/*!\n * Chai - getPathValue utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\nvar getPathInfo = require('./getPathInfo');\n\n/**\n * ### .getPathValue(path, object)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue('prop1.str', obj); // Hello\n *     getPathValue('prop1.att[2]', obj); // b\n *     getPathValue('prop2.arr[0].nested', obj); // Universe\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\nmodule.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/getPathValue.js\n ** module id = 28\n ** module chunks = 0\n **/","/*!\n * Chai - getPathInfo utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar hasProperty = require('./hasProperty');\n\n/**\n * ### .getPathInfo(path, object)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {String} path\n * @param {Object} object\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nmodule.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};\n\n\n/*!\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `_getPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be as near infinitely deep and nested\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}\n\n\n/*!\n * ## _getPathValue(parsed, obj)\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(parsed, obj);\n *\n * @param {Object} parsed definition from `parsePath`.\n * @param {Object} object to search against\n * @param {Number} object to search against\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/getPathInfo.js\n ** module id = 29\n ** module chunks = 0\n **/","/*!\n * Chai - hasProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has\n * named property or numeric array index.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with natives\n * and null/undefined values.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty('str', obj);  // true\n *     hasProperty('constructor', obj);  // true\n *     hasProperty('bar', obj);  // false\n *\n *     hasProperty('length', obj.str); // true\n *     hasProperty(1, obj.str);  // true\n *     hasProperty(5, obj.str);  // false\n *\n *     hasProperty('length', obj.arr);  // true\n *     hasProperty(2, obj.arr);  // true\n *     hasProperty(3, obj.arr);  // false\n *\n * @param {Objuect} object\n * @param {String|Number} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nvar literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/hasProperty.js\n ** module id = 30\n ** module chunks = 0\n **/","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\nvar flag = require('./flag');\n\n/**\n * ### addProperty (ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/addProperty.js\n ** module id = 31\n ** module chunks = 0\n **/","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('../config');\n\n/**\n * ### .addMethod (ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\nvar flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/addMethod.js\n ** module id = 32\n ** module chunks = 0\n **/","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/overwriteProperty.js\n ** module id = 33\n ** module chunks = 0\n **/","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/overwriteMethod.js\n ** module id = 34\n ** module chunks = 0\n **/","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');\n\n/*!\n * Module variables\n */\n\n// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### addChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/addChainableMethod.js\n ** module id = 35\n ** module chunks = 0\n **/","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/utils/overwriteChainableMethod.js\n ** module id = 36\n ** module chunks = 0\n **/","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * @api private\n   */\n\n  function Assertion (obj, msg, stack) {\n    flag(this, 'ssfi', stack || arguments.callee);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (true !== showDiff) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      var msg = util.getMessage(this, arguments)\n        , actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/assertion.js\n ** module id = 37\n ** module chunks = 0\n **/","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to\n   * improve the readability of your assertions. They\n   * do not provide testing capabilities unless they\n   * have been overwritten by a plugin.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same' ].forEach(function (chain) {\n    Assertion.addProperty(chain, function () {\n      return this;\n    });\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates any of assertions following in the chain.\n   *\n   *     expect(foo).to.not.equal('bar');\n   *     expect(goodFn).to.not.throw(Error);\n   *     expect({ foo: 'baz' }).to.have.property('foo')\n   *       .and.not.equal('bar');\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Sets the `deep` flag, later used by the `equal` and\n   * `property` assertions.\n   *\n   *     expect(foo).to.deep.equal({ bar: 'baz' });\n   *     expect({ foo: { bar: { baz: 'quux' } } })\n   *       .to.have.deep.property('foo.bar.baz', 'quux');\n   *\n   * `.deep.property` special characters can be escaped\n   * by adding two slashes before the `.` or `[]`.\n   *\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Sets the `any` flag, (opposite of the `all` flag)\n   * later used in the `keys` assertion.\n   *\n   *     expect(foo).to.have.any.keys('bar', 'baz');\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false)\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Sets the `all` flag (opposite of the `any` flag)\n   * later used by the `keys` assertion.\n   *\n   *     expect(foo).to.have.all.keys('bar', 'baz');\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type)\n   *\n   * The `a` and `an` assertions are aliases that can be\n   * used either as language chains or to assert a value's\n   * type.\n   *\n   *     // typeof\n   *     expect('test').to.be.a('string');\n   *     expect({ foo: 'bar' }).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(new Promise).to.be.a('promise');\n   *     expect(new Float32Array()).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   *     // es6 overrides\n   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');\n   *\n   *     // language chain\n   *     expect(foo).to.be.an.instanceof(Foo);\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj)\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(value)\n   *\n   * The `include` and `contain` assertions can be used as either property\n   * based language chains or as methods to assert the inclusion of an object\n   * in an array or a substring in a string. When used as language chains,\n   * they toggle the `contains` flag for the `keys` assertion.\n   *\n   *     expect([1,2,3]).to.include(2);\n   *     expect('foobar').to.contain('foo');\n   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Object|String|Number} obj\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    _.expectTypes(this, ['array', 'object', 'string']);\n\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var expected = false;\n\n    if (_.type(obj) === 'array' && _.type(val) === 'object') {\n      for (var i in obj) {\n        if (_.eql(obj[i], val)) {\n          expected = true;\n          break;\n        }\n      }\n    } else if (_.type(val) === 'object') {\n      if (!flag(this, 'negate')) {\n        for (var k in val) new Assertion(obj).property(k, val[k]);\n        return;\n      }\n      var subset = {};\n      for (var k in val) subset[k] = obj[k];\n      expected = _.eql(subset, val);\n    } else {\n      expected = (obj != undefined) && ~obj.indexOf(val);\n    }\n    this.assert(\n        expected\n      , 'expected #{this} to include ' + _.inspect(val)\n      , 'expected #{this} to not include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is truthy.\n   *\n   *     expect('everything').to.be.ok;\n   *     expect(1).to.be.ok;\n   *     expect(false).to.not.be.ok;\n   *     expect(undefined).to.not.be.ok;\n   *     expect(null).to.not.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is `true`.\n   *\n   *     expect(true).to.be.true;\n   *     expect(1).to.not.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , this.negate ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is `false`.\n   *\n   *     expect(false).to.be.false;\n   *     expect(0).to.not.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , this.negate ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is `null`.\n   *\n   *     expect(null).to.be.null;\n   *     expect(undefined).to.not.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *     expect(null).to.not.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   * Asserts that the target is `NaN`.\n   *\n   *     expect('foo').to.be.NaN;\n   *     expect(4).not.to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi'\n   *       , bar = null\n   *       , baz;\n   *\n   *     expect(foo).to.exist;\n   *     expect(bar).to.not.exist;\n   *     expect(baz).to.not.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    this.assert(\n        null != flag(this, 'object')\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n\n  /**\n   * ### .empty\n   *\n   * Asserts that the target's length is `0`. For arrays and strings, it checks\n   * the `length` property. For objects, it gets the count of\n   * enumerable keys.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *     expect({}).to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var obj = flag(this, 'object')\n      , expected = obj;\n\n    if (Array.isArray(obj) || 'string' === typeof object) {\n      expected = obj.length;\n    } else if (typeof obj === 'object') {\n      expected = Object.keys(obj).length;\n    }\n\n    this.assert(\n        !expected\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an arguments object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = Object.prototype.toString.call(obj);\n    this.assert(\n        '[object Arguments]' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(value)\n   *\n   * Asserts that the target is strictly equal (`===`) to `value`.\n   * Alternately, if the `deep` flag is set, asserts that\n   * the target is deeply equal to `value`.\n   *\n   *     expect('hello').to.equal('hello');\n   *     expect(42).to.equal(42);\n   *     expect(1).to.not.equal(true);\n   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });\n   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @alias deep.equal\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(value)\n   *\n   * Asserts that the target is deeply equal to `value`.\n   *\n   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });\n   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(value)\n   *\n   * Asserts that the target is greater than `value`.\n   *\n   *     expect(10).to.be.above(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above ' + n\n        , 'expected #{this} to be at most ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(value)\n   *\n   * Asserts that the target is greater than or equal to `value`.\n   *\n   *     expect(10).to.be.at.least(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a minimum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.least(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least ' + n\n        , 'expected #{this} to be below ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(value)\n   *\n   * Asserts that the target is less than `value`.\n   *\n   *     expect(5).to.be.below(10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below ' + n\n        , 'expected #{this} to be at least ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(value)\n   *\n   * Asserts that the target is less than or equal to `value`.\n   *\n   *     expect(5).to.be.at.most(5);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a maximum length. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.of.at.most(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} value\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most ' + n\n        , 'expected #{this} to be above ' + n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish)\n   *\n   * Asserts that the target is within a range.\n   *\n   *     expect(7).to.be.within(5,10);\n   *\n   * Can also be used in conjunction with `length` to\n   * assert a length range. The benefit being a\n   * more informative error message than if the length\n   * was supplied directly.\n   *\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * @name within\n   * @param {Number} start lowerbound inclusive\n   * @param {Number} finish upperbound inclusive\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , range = start + '..' + finish;\n    if (flag(this, 'doLength')) {\n      new Assertion(obj, msg).to.have.property('length');\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor)\n   *\n   * Asserts that the target is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , Chai = new Tea('chai');\n   *\n   *     expect(Chai).to.be.an.instanceof(Tea);\n   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} message _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n    var name = _.getName(constructor);\n    this.assert(\n        flag(this, 'object') instanceof constructor\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name, [value])\n   *\n   * Asserts that the target has a property `name`, optionally asserting that\n   * the value of that property is strictly equal to  `value`.\n   * If the `deep` flag is set, you can use dot- and bracket-notation for deep\n   * references into objects and arrays.\n   *\n   *     // simple referencing\n   *     var obj = { foo: 'bar' };\n   *     expect(obj).to.have.property('foo');\n   *     expect(obj).to.have.property('foo', 'bar');\n   *\n   *     // deep referencing\n   *     var deepObj = {\n   *         green: { tea: 'matcha' }\n   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]\n   *     };\n   *\n   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');\n   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');\n   *\n   * You can also use an array as the starting point of a `deep.property`\n   * assertion, or traverse nested arrays.\n   *\n   *     var arr = [\n   *         [ 'chai', 'matcha', 'konacha' ]\n   *       , [ { tea: 'chai' }\n   *         , { tea: 'matcha' }\n   *         , { tea: 'konacha' } ]\n   *     ];\n   *\n   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');\n   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');\n   *\n   * Furthermore, `property` changes the subject of the assertion\n   * to be the value of that property from the original object. This\n   * permits for further chainable assertions on that property.\n   *\n   *     expect(obj).to.have.property('foo')\n   *       .that.is.a('string');\n   *     expect(deepObj).to.have.property('green')\n   *       .that.is.an('object')\n   *       .that.deep.equals({ tea: 'matcha' });\n   *     expect(deepObj).to.have.property('teas')\n   *       .that.is.an('array')\n   *       .with.deep.property('[2]')\n   *         .that.deep.equals({ tea: 'konacha' });\n   *\n   * Note that dots and bracket in `name` must be backslash-escaped when\n   * the `deep` flag is set, while they must NOT be escaped when the `deep`\n   * flag is not set.\n   *\n   *     // simple referencing\n   *     var css = { '.link[target]': 42 };\n   *     expect(css).to.have.property('.link[target]', 42);\n   *\n   *     // deep referencing\n   *     var deepCss = { '.link': { '[target]': 42 }};\n   *     expect(deepCss).to.have.deep.property('\\\\.link.\\\\[target\\\\]', 42);\n   *\n   * @name property\n   * @alias deep.property\n   * @param {String} name\n   * @param {Mixed} value (optional)\n   * @param {String} message _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('property', function (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isDeep = !!flag(this, 'deep')\n      , descriptor = isDeep ? 'deep property ' : 'property '\n      , negate = flag(this, 'negate')\n      , obj = flag(this, 'object')\n      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n      , hasProperty = isDeep\n        ? pathInfo.exists\n        : _.hasProperty(name, obj)\n      , value = isDeep\n        ? pathInfo.value\n        : obj[name];\n\n    if (negate && arguments.length > 1) {\n      if (undefined === value) {\n        msg = (msg != null) ? msg + ': ' : '';\n        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n      }\n    } else {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          val === value\n        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  });\n\n\n  /**\n   * ### .ownProperty(name)\n   *\n   * Asserts that the target has an own property `name`.\n   *\n   *     expect('test').to.have.ownProperty('length');\n   *\n   * @name ownProperty\n   * @alias haveOwnProperty\n   * @param {String} name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnProperty (name, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        obj.hasOwnProperty(name)\n      , 'expected #{this} to have own property ' + _.inspect(name)\n      , 'expected #{this} to not have own property ' + _.inspect(name)\n    );\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, message]])\n   *\n   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.\n   *\n   *     expect('test').to.have.ownPropertyDescriptor('length');\n   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });\n   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });\n   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\n   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .length\n   *\n   * Sets the `doLength` flag later used as a chain precursor to a value\n   * comparison for the `length` property.\n   *\n   *     expect('foo').to.have.length.above(2);\n   *     expect([ 1, 2, 3 ]).to.have.length.above(2);\n   *     expect('foo').to.have.length.below(4);\n   *     expect([ 1, 2, 3 ]).to.have.length.below(4);\n   *     expect('foo').to.have.length.within(2,4);\n   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);\n   *\n   * *Deprecation notice:* Using `length` as an assertion will be deprecated\n   * in version 2.4.0 and removed in 3.0.0. Code using the old style of\n   * asserting for `length` property value using `length(value)` should be\n   * switched to use `lengthOf(value)` instead.\n   *\n   * @name length\n   * @namespace BDD\n   * @api public\n   */\n\n  /**\n   * ### .lengthOf(value[, message])\n   *\n   * Asserts that the target's `length` property has\n   * the expected value.\n   *\n   *     expect([ 1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foobar').to.have.lengthOf(6);\n   *\n   * @name lengthOf\n   * @param {Number} length\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addMethod('lengthOf', assertLength);\n\n  /**\n   * ### .match(regexp)\n   *\n   * Asserts that the target matches a regular expression.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} RegularExpression\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(string)\n   *\n   * Asserts that the string target contains another string.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * @name string\n   * @param {String} string\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n\n  /**\n   * ### .keys(key1, [key2], [...])\n   *\n   * Asserts that the target contains any or all of the passed-in keys.\n   * Use in combination with `any`, `all`, `contains`, or `have` will affect\n   * what will pass.\n   *\n   * When used in conjunction with `any`, at least one key that is passed\n   * in must exist in the target object. This is regardless whether or not\n   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`\n   * should be used in the assertion. If neither are used, the assertion is\n   * defaulted to `all`.\n   *\n   * When both `all` and `contain` are used, the target object must have at\n   * least all of the passed-in keys but may have more keys not listed.\n   *\n   * When both `all` and `have` are used, the target object must both contain\n   * all of the passed-in keys AND the number of keys in the target object must\n   * match the number of keys passed in (in other words, a target object must\n   * have all and only all of the passed-in keys).\n   *\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);\n   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);\n   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});\n   *\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , str\n      , ok = true\n      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n    switch (_.type(keys)) {\n      case \"array\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        break;\n      case \"object\":\n        if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    if (!keys.length) throw new Error('keys required');\n\n    var actual = Object.keys(obj)\n      , expected = keys\n      , len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all');\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      var intersection = expected.filter(function(key) {\n        return ~actual.indexOf(key);\n      });\n      ok = intersection.length > 0;\n    }\n\n    // Has all\n    if (all) {\n      ok = keys.every(function(key){\n        return ~actual.indexOf(key);\n      });\n      if (!flag(this, 'negate') && !flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key){\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + str\n      , 'expected #{this} to not ' + str\n      , expected.slice(0).sort()\n      , actual.sort()\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw(constructor)\n   *\n   * Asserts that the function target will throw a specific error, or specific type of error\n   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test\n   * for the error's message.\n   *\n   *     var err = new ReferenceError('This is a bad function.');\n   *     var fn = function () { throw err; }\n   *     expect(fn).to.throw(ReferenceError);\n   *     expect(fn).to.throw(Error);\n   *     expect(fn).to.throw(/bad function/);\n   *     expect(fn).to.not.throw('good function');\n   *     expect(fn).to.throw(ReferenceError, /bad function/);\n   *     expect(fn).to.throw(err);\n   *\n   * Please note that when a throw expectation is negated, it will check each\n   * parameter independently, starting with error constructor type. The appropriate way\n   * to check for the existence of a type of error but for a message that does not match\n   * is to use `and`.\n   *\n   *     expect(fn).to.throw(ReferenceError)\n   *        .and.not.throw(/good function/);\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {ErrorConstructor} constructor\n   * @param {String|RegExp} expected error message\n   * @param {String} message _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (constructor, errMsg, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    new Assertion(obj, msg).is.a('function');\n\n    var thrown = false\n      , desiredError = null\n      , name = null\n      , thrownError = null;\n\n    if (arguments.length === 0) {\n      errMsg = null;\n      constructor = null;\n    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n      errMsg = constructor;\n      constructor = null;\n    } else if (constructor && constructor instanceof Error) {\n      desiredError = constructor;\n      constructor = null;\n      errMsg = null;\n    } else if (typeof constructor === 'function') {\n      name = constructor.prototype.name;\n      if (!name || (name === 'Error' && constructor !== Error)) {\n        name = constructor.name || (new constructor()).name;\n      }\n    } else {\n      constructor = null;\n    }\n\n    try {\n      obj();\n    } catch (err) {\n      // first, check desired error\n      if (desiredError) {\n        this.assert(\n            err === desiredError\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp}'\n          , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        flag(this, 'object', err);\n        return this;\n      }\n\n      // next, check constructor\n      if (constructor) {\n        this.assert(\n            err instanceof constructor\n          , 'expected #{this} to throw #{exp} but #{act} was thrown'\n          , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n          , name\n          , (err instanceof Error ? err.toString() : err)\n        );\n\n        if (!errMsg) {\n          flag(this, 'object', err);\n          return this;\n        }\n      }\n\n      // next, check message\n      var message = 'error' === _.type(err) && \"message\" in err\n        ? err.message\n        : '' + err;\n\n      if ((message != null) && errMsg && errMsg instanceof RegExp) {\n        this.assert(\n            errMsg.exec(message)\n          , 'expected #{this} to throw error matching #{exp} but got #{act}'\n          , 'expected #{this} to throw error not matching #{exp}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n        this.assert(\n            ~message.indexOf(errMsg)\n          , 'expected #{this} to throw error including #{exp} but got #{act}'\n          , 'expected #{this} to throw error not including #{act}'\n          , errMsg\n          , message\n        );\n\n        flag(this, 'object', err);\n        return this;\n      } else {\n        thrown = true;\n        thrownError = err;\n      }\n    }\n\n    var actuallyGot = ''\n      , expectedThrown = name !== null\n        ? name\n        : desiredError\n          ? '#{exp}' //_.inspect(desiredError)\n          : 'an error';\n\n    if (thrown) {\n      actuallyGot = ' but #{act} was thrown'\n    }\n\n    this.assert(\n        thrown === true\n      , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n      , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n      , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n    );\n\n    flag(this, 'object', thrownError);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method)\n   *\n   * Asserts that the object or class target will respond to a method.\n   *\n   *     Klass.prototype.bar = function(){};\n   *     expect(Klass).to.respondTo('bar');\n   *     expect(obj).to.respondTo('bar');\n   *\n   * To check if a constructor will respond to a static function,\n   * set the `itself` flag.\n   *\n   *     Klass.baz = function(){};\n   *     expect(Klass).itself.to.respondTo('baz');\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === _.type(obj) && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Sets the `itself` flag, later used by the `respondTo` assertion.\n   *\n   *     function Foo() {}\n   *     Foo.bar = function() {}\n   *     Foo.prototype.baz = function() {}\n   *\n   *     expect(Foo).itself.to.respondTo('bar');\n   *     expect(Foo).itself.not.to.respondTo('baz');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(method)\n   *\n   * Asserts that the target passes a given truth test.\n   *\n   *     expect(1).to.satisfy(function(num) { return num > 0; });\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , this.negate ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta)\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj, msg).is.a('number');\n    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n      throw new Error('the arguments to closeTo or approximately must be numbers');\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  function isSubsetOf(subset, superset, cmp) {\n    return subset.every(function(elem) {\n      if (!cmp) return superset.indexOf(elem) !== -1;\n\n      return superset.some(function(elem2) {\n        return cmp(elem, elem2);\n      });\n    })\n  }\n\n  /**\n   * ### .members(set)\n   *\n   * Asserts that the target is a superset of `set`,\n   * or that the target and `set` have the same strictly-equal (===) members.\n   * Alternately, if the `deep` flag is set, set members are compared for deep\n   * equality.\n   *\n   *     expect([1, 2, 3]).to.include.members([3, 2]);\n   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n   *\n   *     expect([4, 2]).to.have.members([2, 4]);\n   *     expect([5, 2]).to.not.have.members([5, 2, 1]);\n   *\n   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n\n    new Assertion(obj).to.be.an('array');\n    new Assertion(subset).to.be.an('array');\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    if (flag(this, 'contains')) {\n      return this.assert(\n          isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to be a superset of #{act}'\n        , 'expected #{this} to not be a superset of #{act}'\n        , obj\n        , subset\n      );\n    }\n\n    this.assert(\n        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n        , 'expected #{this} to have the same members as #{act}'\n        , 'expected #{this} to not have the same members as #{act}'\n        , obj\n        , subset\n    );\n  });\n\n  /**\n   * ### .oneOf(list)\n   *\n   * Assert that a value appears somewhere in the top level of array `list`.\n   *\n   *     expect('a').to.be.oneOf(['a', 'b', 'c']);\n   *     expect(9).to.not.be.oneOf(['z']);\n   *     expect([3]).to.not.be.oneOf([1, 2, [3]]);\n   *\n   *     var three = [3];\n   *     // for object-types, contents are not compared\n   *     expect(three).to.not.be.oneOf([1, 2, [3]]);\n   *     // comparing references works\n   *     expect(three).to.be.oneOf([1, 2, three]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object');\n    new Assertion(list).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(function)\n   *\n   * Asserts that a function changes an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 3 };\n   *     var noChangeFn = function() { return 'foo' + 'bar'; }\n   *     expect(fn).to.change(obj, 'val');\n   *     expect(noChangeFn).to.not.change(obj, 'val')\n   *\n   * @name change\n   * @alias changes\n   * @alias Change\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      initial !== object[prop]\n      , 'expected .' + prop + ' to change'\n      , 'expected .' + prop + ' to not change'\n    );\n  }\n\n  Assertion.addChainableMethod('change', assertChanges);\n  Assertion.addChainableMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(function)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     expect(fn).to.increase(obj, 'val');\n   *\n   * @name increase\n   * @alias increases\n   * @alias Increase\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial > 0\n      , 'expected .' + prop + ' to increase'\n      , 'expected .' + prop + ' to not increase'\n    );\n  }\n\n  Assertion.addChainableMethod('increase', assertIncreases);\n  Assertion.addChainableMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(function)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     expect(fn).to.decrease(obj, 'val');\n   *\n   * @name decrease\n   * @alias decreases\n   * @alias Decrease\n   * @param {String} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (object, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object');\n    new Assertion(object, msg).to.have.property(prop);\n    new Assertion(fn).is.a('function');\n\n    var initial = object[prop];\n    fn();\n\n    this.assert(\n      object[prop] - initial < 0\n      , 'expected .' + prop + ' to decrease'\n      , 'expected .' + prop + ' to not decrease'\n    );\n  }\n\n  Assertion.addChainableMethod('decrease', assertDecreases);\n  Assertion.addChainableMethod('decreases', assertDecreases);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible (can have new properties added to\n   * it).\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect({}).to.be.extensible;\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isExtensible;\n\n    try {\n      isExtensible = Object.isExtensible(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isExtensible = false;\n      else throw err;\n    }\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect({}).to.not.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isSealed;\n\n    try {\n      isSealed = Object.isSealed(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isSealed = true;\n      else throw err;\n    }\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect({}).to.not.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n    var isFrozen;\n\n    try {\n      isFrozen = Object.isFrozen(obj);\n    } catch (err) {\n      if (err instanceof TypeError) isFrozen = true;\n      else throw err;\n    }\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/core/assertions.js\n ** module id = 38\n ** module chunks = 0\n **/","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Expect\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/interface/expect.js\n ** module id = 39\n ** module chunks = 0\n **/","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace Should\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/interface/should.js\n ** module id = 40\n ** module chunks = 0\n **/","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   * Asserts that value is NaN\n   *\n   *    assert.isNaN('foo', 'foo is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   * Asserts that value is not NaN\n   *\n   *    assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg).not.to.be.NaN;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('number');\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg).to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.include('foobar', 'bar', 'foobar contains string \"bar\"');\n   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Works\n   * for strings and arrays.\n   *\n   *     assert.notInclude('foobar', 'baz', 'string not include substring');\n   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude).not.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop);\n  };\n\n  /**\n   * ### .deepProperty(object, property, [message])\n   *\n   * Asserts that `object` has a property named by `property`, which can be a\n   * string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name deepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop);\n  };\n\n  /**\n   * ### .notDeepProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for deep reference.\n   *\n   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notDeepProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`.\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.property(prop, val);\n  };\n\n  /**\n   * ### .propertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`.\n   *\n   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');\n   *\n   * @name propertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for deep\n   * reference.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyNotVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property`, but with a value\n   * different from that given by `value`. `property` can use dot- and\n   * bracket-notation for deep reference.\n   *\n   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *\n   * @name deepPropertyNotVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg).to.have.length(len);\n  };\n\n  /**\n   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, ReferenceError, 'function throws a reference error');\n   *     assert.throws(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errt, errs, msg) {\n    if ('string' === typeof errt || errt instanceof RegExp) {\n      errs = errt;\n      errt = null;\n    }\n\n    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     assert.doesNotThrow(fn, Error, 'function does not throw');\n   *\n   * @name doesNotThrow\n   * @param {Function} function\n   * @param {ErrorConstructor} constructor\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, type, msg) {\n    if ('string' === typeof type) {\n      msg = type;\n      type = null;\n    }\n\n    new Assertion(fn, msg).to.not.Throw(type);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        throw new Error('Invalid operator \"' + operator + '\"');\n    }\n    var test = new Assertion(ok, msg);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg).to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members.\n   * Order is not taken into account.\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.\n   * Order is not taken into account.\n   *\n   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg).to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset`.\n   * Order is not taken into account.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` - using deep equality checking.\n   * Order is not taken into account.\n   * Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg).to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg).to.be.oneOf(list);\n  }\n\n   /**\n   * ### .changes(function, object, property)\n   *\n   * Asserts that a function changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop) {\n    new Assertion(fn).to.change(obj, prop);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property)\n   *\n   * Asserts that a function does not changes the value of a property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop) {\n    new Assertion(fn).to.not.change(obj, prop);\n  }\n\n   /**\n   * ### .increases(function, object, property)\n   *\n   * Asserts that a function increases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop) {\n    new Assertion(fn).to.increase(obj, prop);\n  }\n\n   /**\n   * ### .doesNotIncrease(function, object, property)\n   *\n   * Asserts that a function does not increase object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.increase(obj, prop);\n  }\n\n   /**\n   * ### .decreases(function, object, property)\n   *\n   * Asserts that a function decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop) {\n    new Assertion(fn).to.decrease(obj, prop);\n  }\n\n   /**\n   * ### .doesNotDecrease(function, object, property)\n   *\n   * Asserts that a function does not decreases an object property\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object\n   * @param {String} property name\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop) {\n    new Assertion(fn).to.not.decrease(obj, prop);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freese({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg).to.not.be.frozen;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen');\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/chai/lib/chai/interface/assert.js\n ** module id = 41\n ** module chunks = 0\n **/"],"sourceRoot":""}